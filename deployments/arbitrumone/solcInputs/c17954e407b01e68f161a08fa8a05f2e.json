{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./OwnableUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership} and {acceptOwnership}.\n *\n * This module is used through inheritance. It will make available all functions\n * from parent (Ownable).\n */\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\n    address private _pendingOwner;\n\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\n\n    function __Ownable2Step_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the address of the pending owner.\n     */\n    function pendingOwner() public view virtual returns (address) {\n        return _pendingOwner;\n    }\n\n    /**\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\n        _pendingOwner = newOwner;\n        emit OwnershipTransferStarted(owner(), newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual override {\n        delete _pendingOwner;\n        super._transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev The new owner accepts the ownership transfer.\n     */\n    function acceptOwnership() public virtual {\n        address sender = _msgSender();\n        require(pendingOwner() == sender, \"Ownable2Step: caller is not the new owner\");\n        _transferOwnership(sender);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/Governance/GovernorBravoDelegate.sol": {
      "content": "pragma solidity 0.8.25;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport { Ownable2StepUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\";\r\n\r\n/**\r\n * @title TimelockInterface\r\n * @author Venus\r\n * @notice Interface implemented by the Timelock contract.\r\n */\r\ninterface TimelockInterface {\r\n    function delay() external view returns (uint);\r\n\r\n    function GRACE_PERIOD() external view returns (uint);\r\n\r\n    function acceptOwner() external;\r\n\r\n    function queuedTransactions(bytes32 hash) external view returns (bool);\r\n\r\n    function queueTransaction(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external returns (bytes32);\r\n\r\n    function cancelTransaction(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external;\r\n\r\n    function executeTransaction(\r\n        address target,\r\n        uint value,\r\n        string calldata signature,\r\n        bytes calldata data,\r\n        uint eta\r\n    ) external payable returns (bytes memory);\r\n}\r\n\r\ninterface EclVaultInterface {\r\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\r\n}\r\n\r\ninterface GovernorAlphaInterface {\r\n    /// @notice The total number of proposals\r\n    function proposalCount() external returns (uint);\r\n}\r\n/**\r\n * @title GovernorBravoDelegate\r\n * @notice Venus Governance latest on chain governance includes several new features including variable proposal routes and fine grained pause control.\r\n * Variable routes for proposals allows for governance paramaters such as voting threshold and timelocks to be customized based on the risk level and\r\n * impact of the proposal. Added granularity to the pause control mechanism allows governance to pause individual actions on specific markets,\r\n * which reduces impact on the protocol as a whole. This is particularly useful when applied to isolated pools.\r\n *\r\n * The goal of **Governance** is to increase governance efficiency, while mitigating and eliminating malicious or erroneous proposals.\r\n *\r\n * ## Details\r\n *\r\n * Governance has **3 main contracts**: **GovernanceBravoDelegate, ECLVault, ECL** token.\r\n *\r\n * - ECL token is the protocol token used for protocol users to cast their vote on submitted proposals.\r\n * - ECLVault is the main staking contract for ECL. Users first stake their ECL in the vault and receive voting power proportional to their staked\r\n * tokens that they can use to vote on proposals. Users also can choose to delegate their voting power to other users.\r\n *\r\n * # Governor Bravo\r\n *\r\n * `GovernanceBravoDelegate` is main Venus Governance contract. Users interact with it to:\r\n * - Submit new proposal\r\n * - Vote on a proposal\r\n * - Cancel a proposal\r\n * - Queue a proposal for execution with a timelock executor contract.\r\n * `GovernanceBravoDelegate` uses the ECLVault to get restrict certain actions based on a user's voting power. The governance rules it inforces are:\r\n * - A user's voting power must be greater than the `proposalThreshold` to submit a proposal\r\n * - If a user's voting power drops below certain amount, anyone can cancel the the proposal. The governance guardian and proposal creator can also\r\n * cancel a proposal at anytime before it is queued for execution.\r\n *\r\n * ## Venus Improvement Proposal\r\n *\r\n * Venus Governance allows for Venus Improvement Proposals (VIPs) to be categorized based on their impact and risk levels. This allows for optimizing proposals\r\n * execution to allow for things such as expediting interest rate changes and quickly updating risk parameters, while moving slower on other types of proposals\r\n * that can prevent a larger risk to the protocol and are not urgent. There are three different types of VIPs with different proposal paramters:\r\n *\r\n * - `NORMAL`\r\n * - `FASTTRACK`\r\n * - `CRITICAL`\r\n *\r\n * When initializing the `GovernorBravo` contract, the parameters for the three routes are set. The parameters are:\r\n *\r\n * - `votingDelay`: The delay in blocks between submitting a proposal and when voting begins\r\n * - `votingPeriod`: The number of blocks where voting will be open\r\n * - `proposalThreshold`: The number of votes required in order submit a proposal\r\n *\r\n * There is also a separate timelock executor contract for each route, which is used to dispatch the VIP for execution, giving even more control over the\r\n * flow of each type of VIP.\r\n *\r\n * ## Voting\r\n *\r\n * After a VIP is proposed, voting is opened after the `votingDelay` has passed. For example, if `votingDelay = 0`, then voting will begin in the next block\r\n * after the proposal has been submitted. After the delay, the proposal state is `ACTIVE` and users can cast their vote `for`, `against`, or `abstain`,\r\n * weighted by their total voting power (tokens + delegated voting power). Abstaining from a voting allows for a vote to be cast and optionally include a\r\n * comment, without the incrementing for or against vote count. The total voting power for the user is obtained by calling ECLVault's `getPriorVotes`.\r\n *\r\n * `GovernorBravoDelegate` also accepts [EIP-712](https://eips.ethereum.org/EIPS/eip-712) signatures for voting on proposals via the external function\r\n * `castVoteBySig`.\r\n *\r\n * ## Delegating\r\n *\r\n * A users voting power includes the amount of staked ECL the have staked as well as the votes delegate to them. Delegating is the process of a user loaning\r\n * their voting power to another, so that the latter has the combined voting power of both users. This is an important feature because it allows for a user\r\n * to let another user who they trust propose or vote in their place.\r\n *\r\n * The delegation of votes happens through the `ECLVault` contract by calling the `delegate` or `delegateBySig` functions. These same functions can revert\r\n * vote delegation by calling the same function with a value of `0`.\r\n */\r\ncontract GovernorBravoDelegate {\r\n    /// @notice Initial proposal id set at become\r\n    uint public initialProposalId;\r\n\r\n    /// @notice The total number of proposals\r\n    uint public proposalCount;\r\n\r\n    /// @notice The address of the Venus Protocol Timelock\r\n    TimelockInterface public timelock;\r\n\r\n    /// @notice The address of the Venus governance token\r\n    EclVaultInterface public eclVault;\r\n\r\n    /// @notice The official record of all proposals ever proposed\r\n    mapping(uint => Proposal) public proposals;\r\n\r\n    /// @notice The latest proposal for each proposer\r\n    mapping(address => uint) public latestProposalIds;\r\n\r\n    struct Proposal {\r\n        /// @notice Unique id for looking up a proposal\r\n        uint id;\r\n        /// @notice Creator of the proposal\r\n        address proposer;\r\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\r\n        uint eta;\r\n        /// @notice the ordered list of target addresses for calls to be made\r\n        address[] targets;\r\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n        uint[] values;\r\n        /// @notice The ordered list of function signatures to be called\r\n        string[] signatures;\r\n        /// @notice The ordered list of calldata to be passed to each call\r\n        bytes[] calldatas;\r\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\r\n        uint startBlock;\r\n        /// @notice The block at which voting ends: votes must be cast prior to this block\r\n        uint endBlock;\r\n        /// @notice Current number of votes in favor of this proposal\r\n        uint forVotes;\r\n        /// @notice Current number of votes in opposition to this proposal\r\n        uint againstVotes;\r\n        /// @notice Current number of votes for abstaining for this proposal\r\n        uint abstainVotes;\r\n        /// @notice Flag marking whether the proposal has been canceled\r\n        bool canceled;\r\n        /// @notice Flag marking whether the proposal has been executed\r\n        bool executed;\r\n        /// @notice Receipts of ballots for the entire set of voters\r\n        mapping(address => Receipt) receipts;\r\n        /// @notice The type of the proposal\r\n        uint8 proposalType;\r\n    }\r\n\r\n    /// @notice Ballot receipt record for a voter\r\n    struct Receipt {\r\n        /// @notice Whether or not a vote has been cast\r\n        bool hasVoted;\r\n        /// @notice Whether or not the voter supports the proposal or abstains\r\n        uint8 support;\r\n        /// @notice The number of votes the voter had, which were cast\r\n        uint96 votes;\r\n    }\r\n\r\n    /// @notice Possible states that a proposal may be in\r\n    enum ProposalState {\r\n        Pending,\r\n        Active,\r\n        Canceled,\r\n        Defeated,\r\n        Succeeded,\r\n        Queued,\r\n        Expired,\r\n        Executed\r\n    }\r\n\r\n    /// @notice The maximum number of actions that can be included in a proposal\r\n    uint public proposalMaxOperations;\r\n\r\n    /// @notice A privileged role that can cancel any proposal\r\n    address public guardian;\r\n\r\n    /// @notice Owneristrator for this contract\r\n    address public owner;\r\n\r\n    /// @notice Pending owner for this contract\r\n    address public pendingOwner;\r\n\r\n    /// @notice The name of this contract\r\n    string public constant name = \"Enclabs Governor Bravo\";\r\n\r\n    /// @notice The minimum setable proposal threshold\r\n    uint public constant MIN_PROPOSAL_THRESHOLD = 150000e18; // 150,000 Ecl\r\n\r\n    /// @notice The maximum setable proposal threshold\r\n    uint public constant MAX_PROPOSAL_THRESHOLD = 300000e18; //300,000 Ecl\r\n\r\n    /// @notice The minimum setable voting period\r\n    uint public constant MIN_VOTING_PERIOD = 20 * 60 * 3; // About 3 hours, 3 secs per block\r\n\r\n    /// @notice The max setable voting period\r\n    uint public constant MAX_VOTING_PERIOD = 20 * 60 * 24 * 14; // About 2 weeks, 3 secs per block\r\n\r\n    /// @notice The min setable voting delay\r\n    uint public constant MIN_VOTING_DELAY = 1;\r\n\r\n    /// @notice The max setable voting delay\r\n    uint public constant MAX_VOTING_DELAY = 20 * 60 * 24 * 7; // About 1 week, 3 secs per block\r\n\r\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\r\n    uint public constant quorumVotes = 600000e18; // 600,000 = 2% of Ecl\r\n\r\n    /// @notice The EIP-712 typehash for the contract's domain\r\n    bytes32 public constant DOMAIN_TYPEHASH =\r\n        keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\r\n\r\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\r\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\"Ballot(uint256 proposalId,uint8 support)\");\r\n\r\n     enum ProposalType {\r\n        NORMAL,\r\n        FASTTRACK,\r\n        CRITICAL\r\n    }\r\n\r\n    struct ProposalConfig {\r\n        /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\r\n        uint256 votingDelay;\r\n        /// @notice The duration of voting on a proposal, in blocks\r\n        uint256 votingPeriod;\r\n        /// @notice The number of votes required in order for a voter to become a proposer\r\n        uint256 proposalThreshold;\r\n    }\r\n\r\n    /// @notice mapping containing configuration for each proposal type\r\n    mapping(uint => ProposalConfig) public proposalConfigs;\r\n\r\n    /// @notice mapping containing Timelock addresses for each proposal type\r\n    mapping(uint => TimelockInterface) public proposalTimelocks;\r\n\r\n/// @notice An event emitted when a new proposal is created\r\n    event ProposalCreated(\r\n        uint id,\r\n        address proposer,\r\n        address[] targets,\r\n        uint[] values,\r\n        string[] signatures,\r\n        bytes[] calldatas,\r\n        uint startBlock,\r\n        uint endBlock,\r\n        string description,\r\n        uint8 proposalType\r\n    );\r\n\r\n    /// @notice An event emitted when a vote has been cast on a proposal\r\n    /// @param voter The address which casted a vote\r\n    /// @param proposalId The proposal id which was voted on\r\n    /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\r\n    /// @param votes Number of votes which were cast by the voter\r\n    /// @param reason The reason given for the vote by the voter\r\n    event VoteCast(address indexed voter, uint proposalId, uint8 support, uint votes, string reason);\r\n\r\n    /// @notice An event emitted when a proposal has been canceled\r\n    event ProposalCanceled(uint id);\r\n\r\n    /// @notice An event emitted when a proposal has been queued in the Timelock\r\n    event ProposalQueued(uint id, uint eta);\r\n\r\n    /// @notice An event emitted when a proposal has been executed in the Timelock\r\n    event ProposalExecuted(uint id);\r\n\r\n    /// @notice An event emitted when the voting delay is set\r\n    event VotingDelaySet(uint oldVotingDelay, uint newVotingDelay);\r\n\r\n    /// @notice An event emitted when the voting period is set\r\n    event VotingPeriodSet(uint oldVotingPeriod, uint newVotingPeriod);\r\n\r\n    /// @notice Emitted when implementation is changed\r\n    event NewImplementation(address oldImplementation, address newImplementation);\r\n\r\n    /// @notice Emitted when proposal threshold is set\r\n    event ProposalThresholdSet(uint oldProposalThreshold, uint newProposalThreshold);\r\n\r\n    /// @notice Emitted when pendingOwner is changed\r\n    event NewPendingOwner(address oldPendingOwner, address newPendingOwner);\r\n\r\n    /// @notice Emitted when pendingOwner is accepted, which means owner is updated\r\n    event NewOwner(address oldOwner, address newOwner);\r\n\r\n    /// @notice Emitted when the new guardian address is set\r\n    event NewGuardian(address oldGuardian, address newGuardian);\r\n\r\n    /// @notice Emitted when the maximum number of operations in one proposal is updated\r\n    event ProposalMaxOperationsUpdated(uint oldMaxOperations, uint newMaxOperations);\r\n    /**\r\n     * @notice Used to initialize the contract during delegator contructor\r\n     * @param eclVault_ The address of the EclVault\r\n     * @param proposalConfigs_ Governance configs for each governance route\r\n     * @param timelocks Timelock addresses for each governance route\r\n     */\r\n    function initialize(\r\n        address eclVault_,\r\n        ProposalConfig[] memory proposalConfigs_,\r\n        TimelockInterface[] memory timelocks,\r\n        address guardian_\r\n    ) public {\r\n        require(address(proposalTimelocks[0]) == address(0), \"GovernorBravo::initialize: cannot initialize twice\");\r\n        require(msg.sender == owner, \"GovernorBravo::initialize: owner only\");\r\n        require(eclVault_ != address(0), \"GovernorBravo::initialize: invalid ecl address\");\r\n        require(guardian_ != address(0), \"GovernorBravo::initialize: invalid guardian\");\r\n        require(\r\n            timelocks.length == uint8(ProposalType.CRITICAL) + 1,\r\n            \"GovernorBravo::initialize:number of timelocks should match number of governance routes\"\r\n        );\r\n        require(\r\n            proposalConfigs_.length == uint8(ProposalType.CRITICAL) + 1,\r\n            \"GovernorBravo::initialize:number of proposal configs should match number of governance routes\"\r\n        );\r\n\r\n        eclVault = EclVaultInterface(eclVault_);\r\n        proposalMaxOperations = 10;\r\n        guardian = guardian_;\r\n\r\n        //Set parameters for each Governance Route\r\n        uint256 arrLength = proposalConfigs_.length;\r\n        for (uint256 i; i < arrLength; ++i) {\r\n            require(\r\n                proposalConfigs_[i].votingPeriod >= MIN_VOTING_PERIOD,\r\n                \"GovernorBravo::initialize: invalid min voting period\"\r\n            );\r\n            require(\r\n                proposalConfigs_[i].votingPeriod <= MAX_VOTING_PERIOD,\r\n                \"GovernorBravo::initialize: invalid max voting period\"\r\n            );\r\n            require(\r\n                proposalConfigs_[i].votingDelay >= MIN_VOTING_DELAY,\r\n                \"GovernorBravo::initialize: invalid min voting delay\"\r\n            );\r\n            require(\r\n                proposalConfigs_[i].votingDelay <= MAX_VOTING_DELAY,\r\n                \"GovernorBravo::initialize: invalid max voting delay\"\r\n            );\r\n            require(\r\n                proposalConfigs_[i].proposalThreshold >= MIN_PROPOSAL_THRESHOLD,\r\n                \"GovernorBravo::initialize: invalid min proposal threshold\"\r\n            );\r\n            require(\r\n                proposalConfigs_[i].proposalThreshold <= MAX_PROPOSAL_THRESHOLD,\r\n                \"GovernorBravo::initialize: invalid max proposal threshold\"\r\n            );\r\n            require(address(timelocks[i]) != address(0), \"GovernorBravo::initialize:invalid timelock address\");\r\n\r\n            proposalConfigs[i] = proposalConfigs_[i];\r\n            proposalTimelocks[i] = timelocks[i];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Function used to propose a new proposal. Sender must have delegates above the proposal threshold.\r\n     * targets, values, signatures, and calldatas must be of equal length\r\n     * @dev NOTE: Proposals with duplicate set of actions can not be queued for execution. If the proposals consists\r\n     *  of duplicate actions, it's recommended to split those actions into separate proposals\r\n     * @param targets Target addresses for proposal calls\r\n     * @param values BNB values for proposal calls\r\n     * @param signatures Function signatures for proposal calls\r\n     * @param calldatas Calldatas for proposal calls\r\n     * @param description String description of the proposal\r\n     * @param proposalType the type of the proposal (e.g NORMAL, FASTTRACK, CRITICAL)\r\n     * @return Proposal id of new proposal\r\n     */\r\n    function propose(\r\n        address[] memory targets,\r\n        uint[] memory values,\r\n        string[] memory signatures,\r\n        bytes[] memory calldatas,\r\n        string memory description,\r\n        ProposalType proposalType\r\n    ) public returns (uint) {\r\n        // Reject proposals before initiating as Governor\r\n        require(initialProposalId != 0, \"GovernorBravo::propose: Governor Bravo not active\");\r\n        require(\r\n            eclVault.getPriorVotes(msg.sender, sub256(block.number, 1)) >=\r\n                proposalConfigs[uint8(proposalType)].proposalThreshold,\r\n            \"GovernorBravo::propose: proposer votes below proposal threshold\"\r\n        );\r\n        require(\r\n            targets.length == values.length &&\r\n                targets.length == signatures.length &&\r\n                targets.length == calldatas.length,\r\n            \"GovernorBravo::propose: proposal function information arity mismatch\"\r\n        );\r\n        require(targets.length != 0, \"GovernorBravo::propose: must provide actions\");\r\n        require(targets.length <= proposalMaxOperations, \"GovernorBravo::propose: too many actions\");\r\n\r\n        uint latestProposalId = latestProposalIds[msg.sender];\r\n        if (latestProposalId != 0) {\r\n            ProposalState proposersLatestProposalState = state(latestProposalId);\r\n            require(\r\n                proposersLatestProposalState != ProposalState.Active,\r\n                \"GovernorBravo::propose: one live proposal per proposer, found an already active proposal\"\r\n            );\r\n            require(\r\n                proposersLatestProposalState != ProposalState.Pending,\r\n                \"GovernorBravo::propose: one live proposal per proposer, found an already pending proposal\"\r\n            );\r\n        }\r\n\r\n        uint startBlock = add256(block.number, proposalConfigs[uint8(proposalType)].votingDelay);\r\n        uint endBlock = add256(startBlock, proposalConfigs[uint8(proposalType)].votingPeriod);\r\n\r\n        proposalCount++;\r\n        \r\n        // Proposal memory newProposal = Proposal({\r\n        //     id: proposalCount,\r\n        //     proposer: msg.sender,\r\n        //     eta: 0,\r\n        //     targets: targets,\r\n        //     values: values,\r\n        //     signatures: signatures,\r\n        //     calldatas: calldatas,\r\n        //     startBlock: startBlock,\r\n        //     endBlock: endBlock,\r\n        //     forVotes: 0,\r\n        //     againstVotes: 0,\r\n        //     abstainVotes: 0,\r\n        //     canceled: false,\r\n        //     executed: false,\r\n        //     proposalType: uint8(proposalType)\r\n        // });\r\n        \r\n\r\n        //proposals[newProposal.id] = newProposal;\r\n        //latestProposalIds[newProposal.proposer] = newProposal.id;\r\n        \r\n        \r\n        // proposals[proposalCount] = Proposal({\r\n        //     id: proposalCount,\r\n        //     proposer: msg.sender,\r\n        //     eta: 0,\r\n        //     targets: targets,\r\n        //     values: values,\r\n        //     signatures: signatures,\r\n        //     calldatas: calldatas,\r\n        //     startBlock: startBlock,\r\n        //     endBlock: endBlock,\r\n        //     forVotes: 0,\r\n        //     againstVotes: 0,\r\n        //     abstainVotes: 0,\r\n        //     canceled: false,\r\n        //     executed: false,\r\n        //     proposalType: uint8(proposalType)\r\n        // });\r\n        proposals[proposalCount].id = proposalCount;\r\n        proposals[proposalCount].proposer = msg.sender;\r\n        proposals[proposalCount].eta = 0;\r\n        proposals[proposalCount].targets = targets;\r\n        proposals[proposalCount].values = values;\r\n        proposals[proposalCount].signatures = signatures;\r\n        proposals[proposalCount].calldatas = calldatas;\r\n        proposals[proposalCount].startBlock = startBlock;\r\n        proposals[proposalCount].endBlock = endBlock;\r\n        proposals[proposalCount].forVotes = 0;\r\n        proposals[proposalCount].againstVotes = 0;\r\n        proposals[proposalCount].abstainVotes = 0;\r\n        proposals[proposalCount].canceled = false;\r\n        proposals[proposalCount].executed = false;\r\n        proposals[proposalCount].proposalType = uint8(proposalType);\r\n\r\n        latestProposalIds[proposals[proposalCount].proposer] = proposalCount;\r\n\r\n        emit ProposalCreated(\r\n            proposalCount,\r\n            msg.sender,\r\n            targets,\r\n            values,\r\n            signatures,\r\n            calldatas,\r\n            startBlock,\r\n            endBlock,\r\n            description,\r\n            uint8(proposalType)\r\n        );\r\n        return proposalCount;\r\n    }\r\n\r\n    /**\r\n     * @notice Queues a proposal of state succeeded\r\n     * @param proposalId The id of the proposal to queue\r\n     */\r\n    function queue(uint proposalId) external {\r\n        require(\r\n            state(proposalId) == ProposalState.Succeeded,\r\n            \"GovernorBravo::queue: proposal can only be queued if it is succeeded\"\r\n        );\r\n        Proposal storage proposal = proposals[proposalId];\r\n        uint eta = add256(block.timestamp, proposalTimelocks[uint8(proposal.proposalType)].delay());\r\n        for (uint i; i < proposal.targets.length; ++i) {\r\n            queueOrRevertInternal(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                eta,\r\n                uint8(proposal.proposalType)\r\n            );\r\n        }\r\n        proposal.eta = eta;\r\n        emit ProposalQueued(proposalId, eta);\r\n    }\r\n\r\n    function queueOrRevertInternal(\r\n        address target,\r\n        uint value,\r\n        string memory signature,\r\n        bytes memory data,\r\n        uint eta,\r\n        uint8 proposalType\r\n    ) internal {\r\n        require(\r\n            !proposalTimelocks[proposalType].queuedTransactions(\r\n                keccak256(abi.encode(target, value, signature, data, eta))\r\n            ),\r\n            \"GovernorBravo::queueOrRevertInternal: identical proposal action already queued at eta\"\r\n        );\r\n        proposalTimelocks[proposalType].queueTransaction(target, value, signature, data, eta);\r\n    }\r\n\r\n    /**\r\n     * @notice Executes a queued proposal if eta has passed\r\n     * @param proposalId The id of the proposal to execute\r\n     */\r\n    function execute(uint proposalId) external {\r\n        require(\r\n            state(proposalId) == ProposalState.Queued,\r\n            \"GovernorBravo::execute: proposal can only be executed if it is queued\"\r\n        );\r\n        Proposal storage proposal = proposals[proposalId];\r\n        proposal.executed = true;\r\n        for (uint i; i < proposal.targets.length; ++i) {\r\n            proposalTimelocks[uint8(proposal.proposalType)].executeTransaction(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                proposal.eta\r\n            );\r\n        }\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    /**\r\n     * @notice Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\r\n     * @param proposalId The id of the proposal to cancel\r\n     */\r\n    function cancel(uint proposalId) external {\r\n        require(state(proposalId) != ProposalState.Executed, \"GovernorBravo::cancel: cannot cancel executed proposal\");\r\n\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(\r\n            msg.sender == guardian ||\r\n                msg.sender == proposal.proposer ||\r\n                eclVault.getPriorVotes(proposal.proposer, sub256(block.number, 1)) <\r\n                proposalConfigs[proposal.proposalType].proposalThreshold,\r\n            \"GovernorBravo::cancel: proposer above threshold\"\r\n        );\r\n\r\n        proposal.canceled = true;\r\n        for (uint i = 0; i < proposal.targets.length; i++) {\r\n            proposalTimelocks[proposal.proposalType].cancelTransaction(\r\n                proposal.targets[i],\r\n                proposal.values[i],\r\n                proposal.signatures[i],\r\n                proposal.calldatas[i],\r\n                proposal.eta\r\n            );\r\n        }\r\n\r\n        emit ProposalCanceled(proposalId);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets actions of a proposal\r\n     * @param proposalId the id of the proposal\r\n     * \r\n     */\r\n    function getActions(\r\n        uint proposalId\r\n    )\r\n        external\r\n        view\r\n        returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas)\r\n    {\r\n        Proposal storage p = proposals[proposalId];\r\n        return (p.targets, p.values, p.signatures, p.calldatas);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the receipt for a voter on a given proposal\r\n     * @param proposalId the id of proposal\r\n     * @param voter The address of the voter\r\n     * @return address \r\n     */\r\n    function getReceipt(uint proposalId, address voter) external view returns (Receipt memory) {\r\n        return proposals[proposalId].receipts[voter];\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the state of a proposal\r\n     * @param proposalId The id of the proposal\r\n     * @return ProposalState\r\n     */\r\n    function state(uint proposalId) public view returns (ProposalState) {\r\n        require(\r\n            proposalCount >= proposalId && proposalId > initialProposalId,\r\n            \"GovernorBravo::state: invalid proposal id\"\r\n        );\r\n        Proposal storage proposal = proposals[proposalId];\r\n        if (proposal.canceled) {\r\n            return ProposalState.Canceled;\r\n        } else if (block.number <= proposal.startBlock) {\r\n            return ProposalState.Pending;\r\n        } else if (block.number <= proposal.endBlock) {\r\n            return ProposalState.Active;\r\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes) {\r\n            return ProposalState.Defeated;\r\n        } else if (proposal.eta == 0) {\r\n            return ProposalState.Succeeded;\r\n        } else if (proposal.executed) {\r\n            return ProposalState.Executed;\r\n        } else if (\r\n            block.timestamp >= add256(proposal.eta, proposalTimelocks[uint8(proposal.proposalType)].GRACE_PERIOD())\r\n        ) {\r\n            return ProposalState.Expired;\r\n        } else {\r\n            return ProposalState.Queued;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Cast a vote for a proposal\r\n     * @param proposalId The id of the proposal to vote on\r\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\r\n     */\r\n    function castVote(uint proposalId, uint8 support) external {\r\n        emit VoteCast(msg.sender, proposalId, support, castVoteInternal(msg.sender, proposalId, support), \"\");\r\n    }\r\n\r\n    /**\r\n     * @notice Cast a vote for a proposal with a reason\r\n     * @param proposalId The id of the proposal to vote on\r\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\r\n     * @param reason The reason given for the vote by the voter\r\n     */\r\n    function castVoteWithReason(uint proposalId, uint8 support, string calldata reason) external {\r\n        emit VoteCast(msg.sender, proposalId, support, castVoteInternal(msg.sender, proposalId, support), reason);\r\n    }\r\n\r\n    /**\r\n     * @notice Cast a vote for a proposal by signature\r\n     * @dev External function that accepts EIP-712 signatures for voting on proposals.\r\n     * @param proposalId The id of the proposal to vote on\r\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\r\n     * @param v recovery id of ECDSA signature\r\n     * @param r part of the ECDSA sig output\r\n     * @param s part of the ECDSA sig output\r\n     */\r\n    function castVoteBySig(uint proposalId, uint8 support, uint8 v, bytes32 r, bytes32 s) external {\r\n        bytes32 domainSeparator = keccak256(\r\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainIdInternal(), address(this))\r\n        );\r\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\r\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n        address signatory = ecrecover(digest, v, r, s);\r\n        require(signatory != address(0), \"GovernorBravo::castVoteBySig: invalid signature\");\r\n        emit VoteCast(signatory, proposalId, support, castVoteInternal(signatory, proposalId, support), \"\");\r\n    }\r\n\r\n    /**\r\n     * @notice Internal function that caries out voting logic\r\n     * @param voter The voter that is casting their vote\r\n     * @param proposalId The id of the proposal to vote on\r\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\r\n     * @return The number of votes cast\r\n     */\r\n    function castVoteInternal(address voter, uint proposalId, uint8 support) internal returns (uint96) {\r\n        require(state(proposalId) == ProposalState.Active, \"GovernorBravo::castVoteInternal: voting is closed\");\r\n        require(support <= 2, \"GovernorBravo::castVoteInternal: invalid vote type\");\r\n        Proposal storage proposal = proposals[proposalId];\r\n        Receipt storage receipt = proposal.receipts[voter];\r\n        require(receipt.hasVoted == false, \"GovernorBravo::castVoteInternal: voter already voted\");\r\n        uint96 votes = eclVault.getPriorVotes(voter, proposal.startBlock);\r\n\r\n        if (support == 0) {\r\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\r\n        } else if (support == 1) {\r\n            proposal.forVotes = add256(proposal.forVotes, votes);\r\n        } else if (support == 2) {\r\n            proposal.abstainVotes = add256(proposal.abstainVotes, votes);\r\n        }\r\n\r\n        receipt.hasVoted = true;\r\n        receipt.support = support;\r\n        receipt.votes = votes;\r\n\r\n        return votes;\r\n    }\r\n\r\n    /**\r\n     * @notice Sets the new governance guardian\r\n     * @param newGuardian the address of the new guardian\r\n     */\r\n    function _setGuardian(address newGuardian) external {\r\n        require(msg.sender == guardian || msg.sender == owner, \"GovernorBravo::_setGuardian: owner or guardian only\");\r\n        require(newGuardian != address(0), \"GovernorBravo::_setGuardian: cannot live without a guardian\");\r\n        address oldGuardian = guardian;\r\n        guardian = newGuardian;\r\n\r\n        emit NewGuardian(oldGuardian, newGuardian);\r\n    }\r\n\r\n    /**\r\n     * @notice Initiate the GovernorBravo contract\r\n     * @dev Owner only. Sets initial proposal id which initiates the contract, ensuring a continuous proposal id count\r\n     * @param governorAlpha The address for the Governor to continue the proposal id count from\r\n     */\r\n    function _initiate(address governorAlpha) external {\r\n        require(msg.sender == owner, \"GovernorBravo::_initiate: owner only\");\r\n        require(initialProposalId == 0, \"GovernorBravo::_initiate: can only initiate once\");\r\n        proposalCount = GovernorAlphaInterface(governorAlpha).proposalCount();\r\n        initialProposalId = proposalCount;\r\n        for (uint256 i; i < uint8(ProposalType.CRITICAL) + 1; ++i) {\r\n            proposalTimelocks[i].acceptOwner();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Set max proposal operations\r\n     * @dev Owner only.\r\n     * @param proposalMaxOperations_ Max proposal operations\r\n     */\r\n    function _setProposalMaxOperations(uint proposalMaxOperations_) external {\r\n        require(msg.sender == owner, \"GovernorBravo::_setProposalMaxOperations: owner only\");\r\n        uint oldProposalMaxOperations = proposalMaxOperations;\r\n        proposalMaxOperations = proposalMaxOperations_;\r\n\r\n        emit ProposalMaxOperationsUpdated(oldProposalMaxOperations, proposalMaxOperations_);\r\n    }\r\n\r\n    /**\r\n     * @notice Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\r\n     * @dev Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\r\n     * @param newPendingOwner New pending owner.\r\n     */\r\n    function _setPendingOwner(address newPendingOwner) external {\r\n        // Check caller = owner\r\n        require(msg.sender == owner, \"GovernorBravo:_setPendingOwner: owner only\");\r\n\r\n        // Save current value, if any, for inclusion in log\r\n        address oldPendingOwner = pendingOwner;\r\n\r\n        // Store pendingOwner with value newPendingOwner\r\n        pendingOwner = newPendingOwner;\r\n\r\n        // Emit NewPendingOwner(oldPendingOwner, newPendingOwner)\r\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\r\n    }\r\n\r\n    /**\r\n     * @notice Accepts transfer of owner rights. msg.sender must be pendingOwner\r\n     * @dev Owner function for pending owner to accept role and update owner\r\n     */\r\n    function _acceptOwner() external {\r\n        // Check caller is pendingOwner and pendingOwner ≠ address(0)\r\n        require(\r\n            msg.sender == pendingOwner && msg.sender != address(0),\r\n            \"GovernorBravo:_acceptOwner: pending owner only\"\r\n        );\r\n\r\n        // Save current values for inclusion in log\r\n        address oldOwner = owner;\r\n        address oldPendingOwner = pendingOwner;\r\n\r\n        // Store owner with value pendingOwner\r\n        owner = pendingOwner;\r\n\r\n        // Clear the pending value\r\n        pendingOwner = address(0);\r\n\r\n        emit NewOwner(oldOwner, owner);\r\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\r\n    }\r\n\r\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\r\n        uint c = a + b;\r\n        require(c >= a, \"addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\r\n        require(b <= a, \"subtraction underflow\");\r\n        return a - b;\r\n    }\r\n\r\n    function getChainIdInternal() internal view returns (uint) {\r\n        uint chainId;\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        return chainId;\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": true
      }
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}