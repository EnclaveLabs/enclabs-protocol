{
  "address": "0xb8428C3051A42b90BDeb76Bc40C1A6d987Ece65a",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldGuardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "NewGuardian",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldImplementation",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "NewImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "NewOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "NewPendingOwner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "indexed": false,
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "proposalType",
          "type": "uint8"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxOperations",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxOperations",
          "type": "uint256"
        }
      ],
      "name": "ProposalMaxOperationsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        }
      ],
      "name": "ProposalQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProposalThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProposalThreshold",
          "type": "uint256"
        }
      ],
      "name": "ProposalThresholdSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "VoteCast",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVotingDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVotingDelay",
          "type": "uint256"
        }
      ],
      "name": "VotingDelaySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldVotingPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newVotingPeriod",
          "type": "uint256"
        }
      ],
      "name": "VotingPeriodSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BALLOT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PROPOSAL_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VOTING_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_PROPOSAL_THRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VOTING_DELAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_VOTING_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_acceptOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "governorAlpha",
          "type": "address"
        }
      ],
      "name": "_initiate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGuardian",
          "type": "address"
        }
      ],
      "name": "_setGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newPendingOwner",
          "type": "address"
        }
      ],
      "name": "_setPendingOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalMaxOperations_",
          "type": "uint256"
        }
      ],
      "name": "_setProposalMaxOperations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "cancel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        }
      ],
      "name": "castVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "castVoteBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "support",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "castVoteWithReason",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eclVault",
      "outputs": [
        {
          "internalType": "contract EclVaultInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "getActions",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "voter",
          "type": "address"
        }
      ],
      "name": "getReceipt",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "hasVoted",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "support",
              "type": "uint8"
            },
            {
              "internalType": "uint96",
              "name": "votes",
              "type": "uint96"
            }
          ],
          "internalType": "struct GovernorBravoDelegate.Receipt",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "guardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialProposalId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "eclVault_",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "votingDelay",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingPeriod",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proposalThreshold",
              "type": "uint256"
            }
          ],
          "internalType": "struct GovernorBravoDelegate.ProposalConfig[]",
          "name": "proposalConfigs_",
          "type": "tuple[]"
        },
        {
          "internalType": "contract TimelockInterface[]",
          "name": "timelocks",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "guardian_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "latestProposalIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalConfigs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "votingDelay",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votingPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "proposalThreshold",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalMaxOperations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalTimelocks",
      "outputs": [
        {
          "internalType": "contract TimelockInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "eta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "canceled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "uint8",
          "name": "proposalType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "signatures",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas",
          "type": "bytes[]"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "enum GovernorBravoDelegate.ProposalType",
          "name": "proposalType",
          "type": "uint8"
        }
      ],
      "name": "propose",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "queue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum GovernorBravoDelegate.ProposalState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "contract TimelockInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf214e3b64105e51ee372776e274aca01fa0b6ced5bf10df073144ea4ec427134",
  "receipt": {
    "to": null,
    "from": "0x705A1AC9c9e57cc78993Ab8c0C8AAeb75657e02a",
    "contractAddress": "0xb8428C3051A42b90BDeb76Bc40C1A6d987Ece65a",
    "transactionIndex": 23,
    "gasUsed": "76253640",
    "logsBloom": "0x
    "blockHash": "0x4dbe63d5c52072be86f09074cc26c1d2a915e81cdcf977711d8b2287e7a4c7b7",
    "transactionHash": "0xf214e3b64105e51ee372776e274aca01fa0b6ced5bf10df073144ea4ec427134",
    "logs": [],
    "blockNumber": 278239767,
    "cumulativeGasUsed": "107659993",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4ba7f93f7611e84732b5d00321f17635",
  "metadata": "{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGuardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"NewGuardian\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldImplementation\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"NewImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"NewPendingOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxOperations\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxOperations\",\"type\":\"uint256\"}],\"name\":\"ProposalMaxOperationsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"}],\"name\":\"ProposalQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProposalThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProposalThreshold\",\"type\":\"uint256\"}],\"name\":\"ProposalThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingDelay\",\"type\":\"uint256\"}],\"name\":\"VotingDelaySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldVotingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingPeriod\",\"type\":\"uint256\"}],\"name\":\"VotingPeriodSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BALLOT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PROPOSAL_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_PROPOSAL_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VOTING_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_VOTING_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governorAlpha\",\"type\":\"address\"}],\"name\":\"_initiate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGuardian\",\"type\":\"address\"}],\"name\":\"_setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPendingOwner\",\"type\":\"address\"}],\"name\":\"_setPendingOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalMaxOperations_\",\"type\":\"uint256\"}],\"name\":\"_setProposalMaxOperations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"}],\"name\":\"castVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"castVoteBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"castVoteWithReason\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eclVault\",\"outputs\":[{\"internalType\":\"contract EclVaultInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"getActions\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"}],\"name\":\"getReceipt\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"support\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"internalType\":\"struct GovernorBravoDelegate.Receipt\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"guardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialProposalId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"eclVault_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"votingDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"}],\"internalType\":\"struct GovernorBravoDelegate.ProposalConfig[]\",\"name\":\"proposalConfigs_\",\"type\":\"tuple[]\"},{\"internalType\":\"contract TimelockInterface[]\",\"name\":\"timelocks\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"guardian_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"latestProposalIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalConfigs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"votingDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalMaxOperations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalTimelocks\",\"outputs\":[{\"internalType\":\"contract TimelockInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"eta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"canceled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"proposalType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"signatures\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas\",\"type\":\"bytes[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"enum GovernorBravoDelegate.ProposalType\",\"name\":\"proposalType\",\"type\":\"uint8\"}],\"name\":\"propose\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"queue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum GovernorBravoDelegate.ProposalState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"contract TimelockInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"VoteCast(address,uint256,uint8,uint256,string)\":{\"params\":{\"proposalId\":\"The proposal id which was voted on\",\"reason\":\"The reason given for the vote by the voter\",\"support\":\"Support value for the vote. 0=against, 1=for, 2=abstain\",\"voter\":\"The address which casted a vote\",\"votes\":\"Number of votes which were cast by the voter\"}}},\"kind\":\"dev\",\"methods\":{\"_acceptOwner()\":{\"details\":\"Owner function for pending owner to accept role and update owner\"},\"_initiate(address)\":{\"details\":\"Owner only. Sets initial proposal id which initiates the contract, ensuring a continuous proposal id count\",\"params\":{\"governorAlpha\":\"The address for the Governor to continue the proposal id count from\"}},\"_setGuardian(address)\":{\"params\":{\"newGuardian\":\"the address of the new guardian\"}},\"_setPendingOwner(address)\":{\"details\":\"Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\",\"params\":{\"newPendingOwner\":\"New pending owner.\"}},\"_setProposalMaxOperations(uint256)\":{\"details\":\"Owner only.\",\"params\":{\"proposalMaxOperations_\":\"Max proposal operations\"}},\"cancel(uint256)\":{\"params\":{\"proposalId\":\"The id of the proposal to cancel\"}},\"castVote(uint256,uint8)\":{\"params\":{\"proposalId\":\"The id of the proposal to vote on\",\"support\":\"The support value for the vote. 0=against, 1=for, 2=abstain\"}},\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\":{\"details\":\"External function that accepts EIP-712 signatures for voting on proposals.\",\"params\":{\"proposalId\":\"The id of the proposal to vote on\",\"r\":\"part of the ECDSA sig output\",\"s\":\"part of the ECDSA sig output\",\"support\":\"The support value for the vote. 0=against, 1=for, 2=abstain\",\"v\":\"recovery id of ECDSA signature\"}},\"castVoteWithReason(uint256,uint8,string)\":{\"params\":{\"proposalId\":\"The id of the proposal to vote on\",\"reason\":\"The reason given for the vote by the voter\",\"support\":\"The support value for the vote. 0=against, 1=for, 2=abstain\"}},\"execute(uint256)\":{\"params\":{\"proposalId\":\"The id of the proposal to execute\"}},\"getActions(uint256)\":{\"params\":{\"proposalId\":\"the id of the proposal \"}},\"getReceipt(uint256,address)\":{\"params\":{\"proposalId\":\"the id of proposal\",\"voter\":\"The address of the voter\"},\"returns\":{\"_0\":\"address \"}},\"initialize(address,(uint256,uint256,uint256)[],address[],address)\":{\"params\":{\"eclVault_\":\"The address of the EclVault\",\"proposalConfigs_\":\"Governance configs for each governance route\",\"timelocks\":\"Timelock addresses for each governance route\"}},\"propose(address[],uint256[],string[],bytes[],string,uint8)\":{\"details\":\"NOTE: Proposals with duplicate set of actions can not be queued for execution. If the proposals consists  of duplicate actions, it's recommended to split those actions into separate proposals\",\"params\":{\"calldatas\":\"Calldatas for proposal calls\",\"description\":\"String description of the proposal\",\"proposalType\":\"the type of the proposal (e.g NORMAL, FASTTRACK, CRITICAL)\",\"signatures\":\"Function signatures for proposal calls\",\"targets\":\"Target addresses for proposal calls\",\"values\":\"BNB values for proposal calls\"},\"returns\":{\"_0\":\"Proposal id of new proposal\"}},\"queue(uint256)\":{\"params\":{\"proposalId\":\"The id of the proposal to queue\"}},\"state(uint256)\":{\"params\":{\"proposalId\":\"The id of the proposal\"},\"returns\":{\"_0\":\"ProposalState\"}}},\"title\":\"GovernorBravoDelegate\",\"version\":1},\"userdoc\":{\"events\":{\"NewGuardian(address,address)\":{\"notice\":\"Emitted when the new guardian address is set\"},\"NewImplementation(address,address)\":{\"notice\":\"Emitted when implementation is changed\"},\"NewOwner(address,address)\":{\"notice\":\"Emitted when pendingOwner is accepted, which means owner is updated\"},\"NewPendingOwner(address,address)\":{\"notice\":\"Emitted when pendingOwner is changed\"},\"ProposalCanceled(uint256)\":{\"notice\":\"An event emitted when a proposal has been canceled\"},\"ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string,uint8)\":{\"notice\":\"An event emitted when a new proposal is created\"},\"ProposalExecuted(uint256)\":{\"notice\":\"An event emitted when a proposal has been executed in the Timelock\"},\"ProposalMaxOperationsUpdated(uint256,uint256)\":{\"notice\":\"Emitted when the maximum number of operations in one proposal is updated\"},\"ProposalQueued(uint256,uint256)\":{\"notice\":\"An event emitted when a proposal has been queued in the Timelock\"},\"ProposalThresholdSet(uint256,uint256)\":{\"notice\":\"Emitted when proposal threshold is set\"},\"VoteCast(address,uint256,uint8,uint256,string)\":{\"notice\":\"An event emitted when a vote has been cast on a proposal\"},\"VotingDelaySet(uint256,uint256)\":{\"notice\":\"An event emitted when the voting delay is set\"},\"VotingPeriodSet(uint256,uint256)\":{\"notice\":\"An event emitted when the voting period is set\"}},\"kind\":\"user\",\"methods\":{\"BALLOT_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the ballot struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"MAX_PROPOSAL_THRESHOLD()\":{\"notice\":\"The maximum setable proposal threshold\"},\"MAX_VOTING_DELAY()\":{\"notice\":\"The max setable voting delay\"},\"MAX_VOTING_PERIOD()\":{\"notice\":\"The max setable voting period\"},\"MIN_PROPOSAL_THRESHOLD()\":{\"notice\":\"The minimum setable proposal threshold\"},\"MIN_VOTING_DELAY()\":{\"notice\":\"The min setable voting delay\"},\"MIN_VOTING_PERIOD()\":{\"notice\":\"The minimum setable voting period\"},\"_acceptOwner()\":{\"notice\":\"Accepts transfer of owner rights. msg.sender must be pendingOwner\"},\"_initiate(address)\":{\"notice\":\"Initiate the GovernorBravo contract\"},\"_setGuardian(address)\":{\"notice\":\"Sets the new governance guardian\"},\"_setPendingOwner(address)\":{\"notice\":\"Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\"},\"_setProposalMaxOperations(uint256)\":{\"notice\":\"Set max proposal operations\"},\"cancel(uint256)\":{\"notice\":\"Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\"},\"castVote(uint256,uint8)\":{\"notice\":\"Cast a vote for a proposal\"},\"castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)\":{\"notice\":\"Cast a vote for a proposal by signature\"},\"castVoteWithReason(uint256,uint8,string)\":{\"notice\":\"Cast a vote for a proposal with a reason\"},\"eclVault()\":{\"notice\":\"The address of the Venus governance token\"},\"execute(uint256)\":{\"notice\":\"Executes a queued proposal if eta has passed\"},\"getActions(uint256)\":{\"notice\":\"Gets actions of a proposal\"},\"getReceipt(uint256,address)\":{\"notice\":\"Gets the receipt for a voter on a given proposal\"},\"guardian()\":{\"notice\":\"A privileged role that can cancel any proposal\"},\"initialProposalId()\":{\"notice\":\"Initial proposal id set at become\"},\"initialize(address,(uint256,uint256,uint256)[],address[],address)\":{\"notice\":\"Used to initialize the contract during delegator contructor\"},\"latestProposalIds(address)\":{\"notice\":\"The latest proposal for each proposer\"},\"name()\":{\"notice\":\"The name of this contract\"},\"owner()\":{\"notice\":\"Owneristrator for this contract\"},\"pendingOwner()\":{\"notice\":\"Pending owner for this contract\"},\"proposalConfigs(uint256)\":{\"notice\":\"mapping containing configuration for each proposal type\"},\"proposalCount()\":{\"notice\":\"The total number of proposals\"},\"proposalMaxOperations()\":{\"notice\":\"The maximum number of actions that can be included in a proposal\"},\"proposalTimelocks(uint256)\":{\"notice\":\"mapping containing Timelock addresses for each proposal type\"},\"proposals(uint256)\":{\"notice\":\"The official record of all proposals ever proposed\"},\"propose(address[],uint256[],string[],bytes[],string,uint8)\":{\"notice\":\"Function used to propose a new proposal. Sender must have delegates above the proposal threshold. targets, values, signatures, and calldatas must be of equal length\"},\"queue(uint256)\":{\"notice\":\"Queues a proposal of state succeeded\"},\"quorumVotes()\":{\"notice\":\"The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\"},\"state(uint256)\":{\"notice\":\"Gets the state of a proposal\"},\"timelock()\":{\"notice\":\"The address of the Venus Protocol Timelock\"}},\"notice\":\"Venus Governance latest on chain governance includes several new features including variable proposal routes and fine grained pause control. Variable routes for proposals allows for governance paramaters such as voting threshold and timelocks to be customized based on the risk level and impact of the proposal. Added granularity to the pause control mechanism allows governance to pause individual actions on specific markets, which reduces impact on the protocol as a whole. This is particularly useful when applied to isolated pools. The goal of **Governance** is to increase governance efficiency, while mitigating and eliminating malicious or erroneous proposals. ## Details Governance has **3 main contracts**: **GovernanceBravoDelegate, ECLVault, ECL** token. - ECL token is the protocol token used for protocol users to cast their vote on submitted proposals. - ECLVault is the main staking contract for ECL. Users first stake their ECL in the vault and receive voting power proportional to their staked tokens that they can use to vote on proposals. Users also can choose to delegate their voting power to other users. # Governor Bravo `GovernanceBravoDelegate` is main Venus Governance contract. Users interact with it to: - Submit new proposal - Vote on a proposal - Cancel a proposal - Queue a proposal for execution with a timelock executor contract. `GovernanceBravoDelegate` uses the ECLVault to get restrict certain actions based on a user's voting power. The governance rules it inforces are: - A user's voting power must be greater than the `proposalThreshold` to submit a proposal - If a user's voting power drops below certain amount, anyone can cancel the the proposal. The governance guardian and proposal creator can also cancel a proposal at anytime before it is queued for execution. ## Venus Improvement Proposal Venus Governance allows for Venus Improvement Proposals (VIPs) to be categorized based on their impact and risk levels. This allows for optimizing proposals execution to allow for things such as expediting interest rate changes and quickly updating risk parameters, while moving slower on other types of proposals that can prevent a larger risk to the protocol and are not urgent. There are three different types of VIPs with different proposal paramters: - `NORMAL` - `FASTTRACK` - `CRITICAL` When initializing the `GovernorBravo` contract, the parameters for the three routes are set. The parameters are: - `votingDelay`: The delay in blocks between submitting a proposal and when voting begins - `votingPeriod`: The number of blocks where voting will be open - `proposalThreshold`: The number of votes required in order submit a proposal There is also a separate timelock executor contract for each route, which is used to dispatch the VIP for execution, giving even more control over the flow of each type of VIP. ## Voting After a VIP is proposed, voting is opened after the `votingDelay` has passed. For example, if `votingDelay = 0`, then voting will begin in the next block after the proposal has been submitted. After the delay, the proposal state is `ACTIVE` and users can cast their vote `for`, `against`, or `abstain`, weighted by their total voting power (tokens + delegated voting power). Abstaining from a voting allows for a vote to be cast and optionally include a comment, without the incrementing for or against vote count. The total voting power for the user is obtained by calling ECLVault's `getPriorVotes`. `GovernorBravoDelegate` also accepts [EIP-712](https://eips.ethereum.org/EIPS/eip-712) signatures for voting on proposals via the external function `castVoteBySig`. ## Delegating A users voting power includes the amount of staked ECL the have staked as well as the votes delegate to them. Delegating is the process of a user loaning their voting power to another, so that the latter has the combined voting power of both users. This is an important feature because it allows for a user to let another user who they trust propose or vote in their place. The delegation of votes happens through the `ECLVault` contract by calling the `delegate` or `delegateBySig` functions. These same functions can revert vote delegation by calling the same function with a value of `0`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Governance/GovernorBravoDelegate.sol\":\"GovernorBravoDelegate\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9140dabc466abab21b48b72dbda26736b1183a310d0e677d3719d201df026510\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"contracts/Governance/GovernorBravoDelegate.sol\":{\"content\":\"pragma solidity 0.8.25;\\r\\npragma experimental ABIEncoderV2;\\r\\n\\r\\nimport { Ownable2StepUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title TimelockInterface\\r\\n * @author Venus\\r\\n * @notice Interface implemented by the Timelock contract.\\r\\n */\\r\\ninterface TimelockInterface {\\r\\n    function delay() external view returns (uint);\\r\\n\\r\\n    function GRACE_PERIOD() external view returns (uint);\\r\\n\\r\\n    function acceptOwner() external;\\r\\n\\r\\n    function queuedTransactions(bytes32 hash) external view returns (bool);\\r\\n\\r\\n    function queueTransaction(\\r\\n        address target,\\r\\n        uint value,\\r\\n        string calldata signature,\\r\\n        bytes calldata data,\\r\\n        uint eta\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function cancelTransaction(\\r\\n        address target,\\r\\n        uint value,\\r\\n        string calldata signature,\\r\\n        bytes calldata data,\\r\\n        uint eta\\r\\n    ) external;\\r\\n\\r\\n    function executeTransaction(\\r\\n        address target,\\r\\n        uint value,\\r\\n        string calldata signature,\\r\\n        bytes calldata data,\\r\\n        uint eta\\r\\n    ) external payable returns (bytes memory);\\r\\n}\\r\\n\\r\\ninterface EclVaultInterface {\\r\\n    function getPriorVotes(address account, uint blockNumber) external view returns (uint96);\\r\\n}\\r\\n\\r\\ninterface GovernorAlphaInterface {\\r\\n    /// @notice The total number of proposals\\r\\n    function proposalCount() external returns (uint);\\r\\n}\\r\\n/**\\r\\n * @title GovernorBravoDelegate\\r\\n * @notice Venus Governance latest on chain governance includes several new features including variable proposal routes and fine grained pause control.\\r\\n * Variable routes for proposals allows for governance paramaters such as voting threshold and timelocks to be customized based on the risk level and\\r\\n * impact of the proposal. Added granularity to the pause control mechanism allows governance to pause individual actions on specific markets,\\r\\n * which reduces impact on the protocol as a whole. This is particularly useful when applied to isolated pools.\\r\\n *\\r\\n * The goal of **Governance** is to increase governance efficiency, while mitigating and eliminating malicious or erroneous proposals.\\r\\n *\\r\\n * ## Details\\r\\n *\\r\\n * Governance has **3 main contracts**: **GovernanceBravoDelegate, ECLVault, ECL** token.\\r\\n *\\r\\n * - ECL token is the protocol token used for protocol users to cast their vote on submitted proposals.\\r\\n * - ECLVault is the main staking contract for ECL. Users first stake their ECL in the vault and receive voting power proportional to their staked\\r\\n * tokens that they can use to vote on proposals. Users also can choose to delegate their voting power to other users.\\r\\n *\\r\\n * # Governor Bravo\\r\\n *\\r\\n * `GovernanceBravoDelegate` is main Venus Governance contract. Users interact with it to:\\r\\n * - Submit new proposal\\r\\n * - Vote on a proposal\\r\\n * - Cancel a proposal\\r\\n * - Queue a proposal for execution with a timelock executor contract.\\r\\n * `GovernanceBravoDelegate` uses the ECLVault to get restrict certain actions based on a user's voting power. The governance rules it inforces are:\\r\\n * - A user's voting power must be greater than the `proposalThreshold` to submit a proposal\\r\\n * - If a user's voting power drops below certain amount, anyone can cancel the the proposal. The governance guardian and proposal creator can also\\r\\n * cancel a proposal at anytime before it is queued for execution.\\r\\n *\\r\\n * ## Venus Improvement Proposal\\r\\n *\\r\\n * Venus Governance allows for Venus Improvement Proposals (VIPs) to be categorized based on their impact and risk levels. This allows for optimizing proposals\\r\\n * execution to allow for things such as expediting interest rate changes and quickly updating risk parameters, while moving slower on other types of proposals\\r\\n * that can prevent a larger risk to the protocol and are not urgent. There are three different types of VIPs with different proposal paramters:\\r\\n *\\r\\n * - `NORMAL`\\r\\n * - `FASTTRACK`\\r\\n * - `CRITICAL`\\r\\n *\\r\\n * When initializing the `GovernorBravo` contract, the parameters for the three routes are set. The parameters are:\\r\\n *\\r\\n * - `votingDelay`: The delay in blocks between submitting a proposal and when voting begins\\r\\n * - `votingPeriod`: The number of blocks where voting will be open\\r\\n * - `proposalThreshold`: The number of votes required in order submit a proposal\\r\\n *\\r\\n * There is also a separate timelock executor contract for each route, which is used to dispatch the VIP for execution, giving even more control over the\\r\\n * flow of each type of VIP.\\r\\n *\\r\\n * ## Voting\\r\\n *\\r\\n * After a VIP is proposed, voting is opened after the `votingDelay` has passed. For example, if `votingDelay = 0`, then voting will begin in the next block\\r\\n * after the proposal has been submitted. After the delay, the proposal state is `ACTIVE` and users can cast their vote `for`, `against`, or `abstain`,\\r\\n * weighted by their total voting power (tokens + delegated voting power). Abstaining from a voting allows for a vote to be cast and optionally include a\\r\\n * comment, without the incrementing for or against vote count. The total voting power for the user is obtained by calling ECLVault's `getPriorVotes`.\\r\\n *\\r\\n * `GovernorBravoDelegate` also accepts [EIP-712](https://eips.ethereum.org/EIPS/eip-712) signatures for voting on proposals via the external function\\r\\n * `castVoteBySig`.\\r\\n *\\r\\n * ## Delegating\\r\\n *\\r\\n * A users voting power includes the amount of staked ECL the have staked as well as the votes delegate to them. Delegating is the process of a user loaning\\r\\n * their voting power to another, so that the latter has the combined voting power of both users. This is an important feature because it allows for a user\\r\\n * to let another user who they trust propose or vote in their place.\\r\\n *\\r\\n * The delegation of votes happens through the `ECLVault` contract by calling the `delegate` or `delegateBySig` functions. These same functions can revert\\r\\n * vote delegation by calling the same function with a value of `0`.\\r\\n */\\r\\ncontract GovernorBravoDelegate {\\r\\n    /// @notice Initial proposal id set at become\\r\\n    uint public initialProposalId;\\r\\n\\r\\n    /// @notice The total number of proposals\\r\\n    uint public proposalCount;\\r\\n\\r\\n    /// @notice The address of the Venus Protocol Timelock\\r\\n    TimelockInterface public timelock;\\r\\n\\r\\n    /// @notice The address of the Venus governance token\\r\\n    EclVaultInterface public eclVault;\\r\\n\\r\\n    /// @notice The official record of all proposals ever proposed\\r\\n    mapping(uint => Proposal) public proposals;\\r\\n\\r\\n    /// @notice The latest proposal for each proposer\\r\\n    mapping(address => uint) public latestProposalIds;\\r\\n\\r\\n    struct Proposal {\\r\\n        /// @notice Unique id for looking up a proposal\\r\\n        uint id;\\r\\n        /// @notice Creator of the proposal\\r\\n        address proposer;\\r\\n        /// @notice The timestamp that the proposal will be available for execution, set once the vote succeeds\\r\\n        uint eta;\\r\\n        /// @notice the ordered list of target addresses for calls to be made\\r\\n        address[] targets;\\r\\n        /// @notice The ordered list of values (i.e. msg.value) to be passed to the calls to be made\\r\\n        uint[] values;\\r\\n        /// @notice The ordered list of function signatures to be called\\r\\n        string[] signatures;\\r\\n        /// @notice The ordered list of calldata to be passed to each call\\r\\n        bytes[] calldatas;\\r\\n        /// @notice The block at which voting begins: holders must delegate their votes prior to this block\\r\\n        uint startBlock;\\r\\n        /// @notice The block at which voting ends: votes must be cast prior to this block\\r\\n        uint endBlock;\\r\\n        /// @notice Current number of votes in favor of this proposal\\r\\n        uint forVotes;\\r\\n        /// @notice Current number of votes in opposition to this proposal\\r\\n        uint againstVotes;\\r\\n        /// @notice Current number of votes for abstaining for this proposal\\r\\n        uint abstainVotes;\\r\\n        /// @notice Flag marking whether the proposal has been canceled\\r\\n        bool canceled;\\r\\n        /// @notice Flag marking whether the proposal has been executed\\r\\n        bool executed;\\r\\n        /// @notice Receipts of ballots for the entire set of voters\\r\\n        mapping(address => Receipt) receipts;\\r\\n        /// @notice The type of the proposal\\r\\n        uint8 proposalType;\\r\\n    }\\r\\n\\r\\n    /// @notice Ballot receipt record for a voter\\r\\n    struct Receipt {\\r\\n        /// @notice Whether or not a vote has been cast\\r\\n        bool hasVoted;\\r\\n        /// @notice Whether or not the voter supports the proposal or abstains\\r\\n        uint8 support;\\r\\n        /// @notice The number of votes the voter had, which were cast\\r\\n        uint96 votes;\\r\\n    }\\r\\n\\r\\n    /// @notice Possible states that a proposal may be in\\r\\n    enum ProposalState {\\r\\n        Pending,\\r\\n        Active,\\r\\n        Canceled,\\r\\n        Defeated,\\r\\n        Succeeded,\\r\\n        Queued,\\r\\n        Expired,\\r\\n        Executed\\r\\n    }\\r\\n\\r\\n    /// @notice The maximum number of actions that can be included in a proposal\\r\\n    uint public proposalMaxOperations;\\r\\n\\r\\n    /// @notice A privileged role that can cancel any proposal\\r\\n    address public guardian;\\r\\n\\r\\n    /// @notice Owneristrator for this contract\\r\\n    address public owner;\\r\\n\\r\\n    /// @notice Pending owner for this contract\\r\\n    address public pendingOwner;\\r\\n\\r\\n    /// @notice The name of this contract\\r\\n    string public constant name = \\\"Enclabs Governor Bravo\\\";\\r\\n\\r\\n    /// @notice The minimum setable proposal threshold\\r\\n    uint public constant MIN_PROPOSAL_THRESHOLD = 150000e18; // 150,000 Ecl\\r\\n\\r\\n    /// @notice The maximum setable proposal threshold\\r\\n    uint public constant MAX_PROPOSAL_THRESHOLD = 300000e18; //300,000 Ecl\\r\\n\\r\\n    /// @notice The minimum setable voting period\\r\\n    uint public constant MIN_VOTING_PERIOD = 20 * 60 * 3; // About 3 hours, 3 secs per block\\r\\n\\r\\n    /// @notice The max setable voting period\\r\\n    uint public constant MAX_VOTING_PERIOD = 20 * 60 * 24 * 14; // About 2 weeks, 3 secs per block\\r\\n\\r\\n    /// @notice The min setable voting delay\\r\\n    uint public constant MIN_VOTING_DELAY = 1;\\r\\n\\r\\n    /// @notice The max setable voting delay\\r\\n    uint public constant MAX_VOTING_DELAY = 20 * 60 * 24 * 7; // About 1 week, 3 secs per block\\r\\n\\r\\n    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\\r\\n    uint public constant quorumVotes = 600000e18; // 600,000 = 2% of Ecl\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the contract's domain\\r\\n    bytes32 public constant DOMAIN_TYPEHASH =\\r\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\r\\n\\r\\n    /// @notice The EIP-712 typehash for the ballot struct used by the contract\\r\\n    bytes32 public constant BALLOT_TYPEHASH = keccak256(\\\"Ballot(uint256 proposalId,uint8 support)\\\");\\r\\n\\r\\n     enum ProposalType {\\r\\n        NORMAL,\\r\\n        FASTTRACK,\\r\\n        CRITICAL\\r\\n    }\\r\\n\\r\\n    struct ProposalConfig {\\r\\n        /// @notice The delay before voting on a proposal may take place, once proposed, in blocks\\r\\n        uint256 votingDelay;\\r\\n        /// @notice The duration of voting on a proposal, in blocks\\r\\n        uint256 votingPeriod;\\r\\n        /// @notice The number of votes required in order for a voter to become a proposer\\r\\n        uint256 proposalThreshold;\\r\\n    }\\r\\n\\r\\n    /// @notice mapping containing configuration for each proposal type\\r\\n    mapping(uint => ProposalConfig) public proposalConfigs;\\r\\n\\r\\n    /// @notice mapping containing Timelock addresses for each proposal type\\r\\n    mapping(uint => TimelockInterface) public proposalTimelocks;\\r\\n\\r\\n/// @notice An event emitted when a new proposal is created\\r\\n    event ProposalCreated(\\r\\n        uint id,\\r\\n        address proposer,\\r\\n        address[] targets,\\r\\n        uint[] values,\\r\\n        string[] signatures,\\r\\n        bytes[] calldatas,\\r\\n        uint startBlock,\\r\\n        uint endBlock,\\r\\n        string description,\\r\\n        uint8 proposalType\\r\\n    );\\r\\n\\r\\n    /// @notice An event emitted when a vote has been cast on a proposal\\r\\n    /// @param voter The address which casted a vote\\r\\n    /// @param proposalId The proposal id which was voted on\\r\\n    /// @param support Support value for the vote. 0=against, 1=for, 2=abstain\\r\\n    /// @param votes Number of votes which were cast by the voter\\r\\n    /// @param reason The reason given for the vote by the voter\\r\\n    event VoteCast(address indexed voter, uint proposalId, uint8 support, uint votes, string reason);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been canceled\\r\\n    event ProposalCanceled(uint id);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been queued in the Timelock\\r\\n    event ProposalQueued(uint id, uint eta);\\r\\n\\r\\n    /// @notice An event emitted when a proposal has been executed in the Timelock\\r\\n    event ProposalExecuted(uint id);\\r\\n\\r\\n    /// @notice An event emitted when the voting delay is set\\r\\n    event VotingDelaySet(uint oldVotingDelay, uint newVotingDelay);\\r\\n\\r\\n    /// @notice An event emitted when the voting period is set\\r\\n    event VotingPeriodSet(uint oldVotingPeriod, uint newVotingPeriod);\\r\\n\\r\\n    /// @notice Emitted when implementation is changed\\r\\n    event NewImplementation(address oldImplementation, address newImplementation);\\r\\n\\r\\n    /// @notice Emitted when proposal threshold is set\\r\\n    event ProposalThresholdSet(uint oldProposalThreshold, uint newProposalThreshold);\\r\\n\\r\\n    /// @notice Emitted when pendingOwner is changed\\r\\n    event NewPendingOwner(address oldPendingOwner, address newPendingOwner);\\r\\n\\r\\n    /// @notice Emitted when pendingOwner is accepted, which means owner is updated\\r\\n    event NewOwner(address oldOwner, address newOwner);\\r\\n\\r\\n    /// @notice Emitted when the new guardian address is set\\r\\n    event NewGuardian(address oldGuardian, address newGuardian);\\r\\n\\r\\n    /// @notice Emitted when the maximum number of operations in one proposal is updated\\r\\n    event ProposalMaxOperationsUpdated(uint oldMaxOperations, uint newMaxOperations);\\r\\n    /**\\r\\n     * @notice Used to initialize the contract during delegator contructor\\r\\n     * @param eclVault_ The address of the EclVault\\r\\n     * @param proposalConfigs_ Governance configs for each governance route\\r\\n     * @param timelocks Timelock addresses for each governance route\\r\\n     */\\r\\n    function initialize(\\r\\n        address eclVault_,\\r\\n        ProposalConfig[] memory proposalConfigs_,\\r\\n        TimelockInterface[] memory timelocks,\\r\\n        address guardian_\\r\\n    ) public {\\r\\n        require(address(proposalTimelocks[0]) == address(0), \\\"GovernorBravo::initialize: cannot initialize twice\\\");\\r\\n        \\r\\n        require(eclVault_ != address(0), \\\"GovernorBravo::initialize: invalid ecl address\\\");\\r\\n        require(guardian_ != address(0), \\\"GovernorBravo::initialize: invalid guardian\\\");\\r\\n        require(\\r\\n            timelocks.length == uint8(ProposalType.CRITICAL) + 1,\\r\\n            \\\"GovernorBravo::initialize:number of timelocks should match number of governance routes\\\"\\r\\n        );\\r\\n        require(\\r\\n            proposalConfigs_.length == uint8(ProposalType.CRITICAL) + 1,\\r\\n            \\\"GovernorBravo::initialize:number of proposal configs should match number of governance routes\\\"\\r\\n        );\\r\\n        owner = msg.sender;\\r\\n        eclVault = EclVaultInterface(eclVault_);\\r\\n        proposalMaxOperations = 10;\\r\\n        guardian = guardian_;\\r\\n\\r\\n        //Set parameters for each Governance Route\\r\\n        uint256 arrLength = proposalConfigs_.length;\\r\\n        for (uint256 i; i < arrLength; ++i) {\\r\\n            require(\\r\\n                proposalConfigs_[i].votingPeriod >= MIN_VOTING_PERIOD,\\r\\n                \\\"GovernorBravo::initialize: invalid min voting period\\\"\\r\\n            );\\r\\n            require(\\r\\n                proposalConfigs_[i].votingPeriod <= MAX_VOTING_PERIOD,\\r\\n                \\\"GovernorBravo::initialize: invalid max voting period\\\"\\r\\n            );\\r\\n            require(\\r\\n                proposalConfigs_[i].votingDelay >= MIN_VOTING_DELAY,\\r\\n                \\\"GovernorBravo::initialize: invalid min voting delay\\\"\\r\\n            );\\r\\n            require(\\r\\n                proposalConfigs_[i].votingDelay <= MAX_VOTING_DELAY,\\r\\n                \\\"GovernorBravo::initialize: invalid max voting delay\\\"\\r\\n            );\\r\\n            require(\\r\\n                proposalConfigs_[i].proposalThreshold >= MIN_PROPOSAL_THRESHOLD,\\r\\n                \\\"GovernorBravo::initialize: invalid min proposal threshold\\\"\\r\\n            );\\r\\n            require(\\r\\n                proposalConfigs_[i].proposalThreshold <= MAX_PROPOSAL_THRESHOLD,\\r\\n                \\\"GovernorBravo::initialize: invalid max proposal threshold\\\"\\r\\n            );\\r\\n            require(address(timelocks[i]) != address(0), \\\"GovernorBravo::initialize:invalid timelock address\\\");\\r\\n\\r\\n            proposalConfigs[i] = proposalConfigs_[i];\\r\\n            proposalTimelocks[i] = timelocks[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Function used to propose a new proposal. Sender must have delegates above the proposal threshold.\\r\\n     * targets, values, signatures, and calldatas must be of equal length\\r\\n     * @dev NOTE: Proposals with duplicate set of actions can not be queued for execution. If the proposals consists\\r\\n     *  of duplicate actions, it's recommended to split those actions into separate proposals\\r\\n     * @param targets Target addresses for proposal calls\\r\\n     * @param values BNB values for proposal calls\\r\\n     * @param signatures Function signatures for proposal calls\\r\\n     * @param calldatas Calldatas for proposal calls\\r\\n     * @param description String description of the proposal\\r\\n     * @param proposalType the type of the proposal (e.g NORMAL, FASTTRACK, CRITICAL)\\r\\n     * @return Proposal id of new proposal\\r\\n     */\\r\\n    function propose(\\r\\n        address[] memory targets,\\r\\n        uint[] memory values,\\r\\n        string[] memory signatures,\\r\\n        bytes[] memory calldatas,\\r\\n        string memory description,\\r\\n        ProposalType proposalType\\r\\n    ) public returns (uint) {\\r\\n        // Reject proposals before initiating as Governor\\r\\n        require(initialProposalId != 0, \\\"GovernorBravo::propose: Governor Bravo not active\\\");\\r\\n        require(\\r\\n            eclVault.getPriorVotes(msg.sender, sub256(block.number, 1)) >=\\r\\n                proposalConfigs[uint8(proposalType)].proposalThreshold,\\r\\n            \\\"GovernorBravo::propose: proposer votes below proposal threshold\\\"\\r\\n        );\\r\\n        require(\\r\\n            targets.length == values.length &&\\r\\n                targets.length == signatures.length &&\\r\\n                targets.length == calldatas.length,\\r\\n            \\\"GovernorBravo::propose: proposal function information arity mismatch\\\"\\r\\n        );\\r\\n        require(targets.length != 0, \\\"GovernorBravo::propose: must provide actions\\\");\\r\\n        require(targets.length <= proposalMaxOperations, \\\"GovernorBravo::propose: too many actions\\\");\\r\\n\\r\\n        uint latestProposalId = latestProposalIds[msg.sender];\\r\\n        if (latestProposalId != 0) {\\r\\n            ProposalState proposersLatestProposalState = state(latestProposalId);\\r\\n            require(\\r\\n                proposersLatestProposalState != ProposalState.Active,\\r\\n                \\\"GovernorBravo::propose: one live proposal per proposer, found an already active proposal\\\"\\r\\n            );\\r\\n            require(\\r\\n                proposersLatestProposalState != ProposalState.Pending,\\r\\n                \\\"GovernorBravo::propose: one live proposal per proposer, found an already pending proposal\\\"\\r\\n            );\\r\\n        }\\r\\n\\r\\n        uint startBlock = add256(block.number, proposalConfigs[uint8(proposalType)].votingDelay);\\r\\n        uint endBlock = add256(startBlock, proposalConfigs[uint8(proposalType)].votingPeriod);\\r\\n\\r\\n        proposalCount++;\\r\\n        \\r\\n        // Proposal memory newProposal = Proposal({\\r\\n        //     id: proposalCount,\\r\\n        //     proposer: msg.sender,\\r\\n        //     eta: 0,\\r\\n        //     targets: targets,\\r\\n        //     values: values,\\r\\n        //     signatures: signatures,\\r\\n        //     calldatas: calldatas,\\r\\n        //     startBlock: startBlock,\\r\\n        //     endBlock: endBlock,\\r\\n        //     forVotes: 0,\\r\\n        //     againstVotes: 0,\\r\\n        //     abstainVotes: 0,\\r\\n        //     canceled: false,\\r\\n        //     executed: false,\\r\\n        //     proposalType: uint8(proposalType)\\r\\n        // });\\r\\n        \\r\\n\\r\\n        //proposals[newProposal.id] = newProposal;\\r\\n        //latestProposalIds[newProposal.proposer] = newProposal.id;\\r\\n        \\r\\n        \\r\\n        // proposals[proposalCount] = Proposal({\\r\\n        //     id: proposalCount,\\r\\n        //     proposer: msg.sender,\\r\\n        //     eta: 0,\\r\\n        //     targets: targets,\\r\\n        //     values: values,\\r\\n        //     signatures: signatures,\\r\\n        //     calldatas: calldatas,\\r\\n        //     startBlock: startBlock,\\r\\n        //     endBlock: endBlock,\\r\\n        //     forVotes: 0,\\r\\n        //     againstVotes: 0,\\r\\n        //     abstainVotes: 0,\\r\\n        //     canceled: false,\\r\\n        //     executed: false,\\r\\n        //     proposalType: uint8(proposalType)\\r\\n        // });\\r\\n        proposals[proposalCount].id = proposalCount;\\r\\n        proposals[proposalCount].proposer = msg.sender;\\r\\n        proposals[proposalCount].eta = 0;\\r\\n        proposals[proposalCount].targets = targets;\\r\\n        proposals[proposalCount].values = values;\\r\\n        proposals[proposalCount].signatures = signatures;\\r\\n        proposals[proposalCount].calldatas = calldatas;\\r\\n        proposals[proposalCount].startBlock = startBlock;\\r\\n        proposals[proposalCount].endBlock = endBlock;\\r\\n        proposals[proposalCount].forVotes = 0;\\r\\n        proposals[proposalCount].againstVotes = 0;\\r\\n        proposals[proposalCount].abstainVotes = 0;\\r\\n        proposals[proposalCount].canceled = false;\\r\\n        proposals[proposalCount].executed = false;\\r\\n        proposals[proposalCount].proposalType = uint8(proposalType);\\r\\n\\r\\n        latestProposalIds[proposals[proposalCount].proposer] = proposalCount;\\r\\n\\r\\n        emit ProposalCreated(\\r\\n            proposalCount,\\r\\n            msg.sender,\\r\\n            targets,\\r\\n            values,\\r\\n            signatures,\\r\\n            calldatas,\\r\\n            startBlock,\\r\\n            endBlock,\\r\\n            description,\\r\\n            uint8(proposalType)\\r\\n        );\\r\\n        return proposalCount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Queues a proposal of state succeeded\\r\\n     * @param proposalId The id of the proposal to queue\\r\\n     */\\r\\n    function queue(uint proposalId) external {\\r\\n        require(\\r\\n            state(proposalId) == ProposalState.Succeeded,\\r\\n            \\\"GovernorBravo::queue: proposal can only be queued if it is succeeded\\\"\\r\\n        );\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        uint eta = add256(block.timestamp, proposalTimelocks[uint8(proposal.proposalType)].delay());\\r\\n        for (uint i; i < proposal.targets.length; ++i) {\\r\\n            queueOrRevertInternal(\\r\\n                proposal.targets[i],\\r\\n                proposal.values[i],\\r\\n                proposal.signatures[i],\\r\\n                proposal.calldatas[i],\\r\\n                eta,\\r\\n                uint8(proposal.proposalType)\\r\\n            );\\r\\n        }\\r\\n        proposal.eta = eta;\\r\\n        emit ProposalQueued(proposalId, eta);\\r\\n    }\\r\\n\\r\\n    function queueOrRevertInternal(\\r\\n        address target,\\r\\n        uint value,\\r\\n        string memory signature,\\r\\n        bytes memory data,\\r\\n        uint eta,\\r\\n        uint8 proposalType\\r\\n    ) internal {\\r\\n        require(\\r\\n            !proposalTimelocks[proposalType].queuedTransactions(\\r\\n                keccak256(abi.encode(target, value, signature, data, eta))\\r\\n            ),\\r\\n            \\\"GovernorBravo::queueOrRevertInternal: identical proposal action already queued at eta\\\"\\r\\n        );\\r\\n        proposalTimelocks[proposalType].queueTransaction(target, value, signature, data, eta);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Executes a queued proposal if eta has passed\\r\\n     * @param proposalId The id of the proposal to execute\\r\\n     */\\r\\n    function execute(uint proposalId) external {\\r\\n        require(\\r\\n            state(proposalId) == ProposalState.Queued,\\r\\n            \\\"GovernorBravo::execute: proposal can only be executed if it is queued\\\"\\r\\n        );\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        proposal.executed = true;\\r\\n        for (uint i; i < proposal.targets.length; ++i) {\\r\\n            proposalTimelocks[uint8(proposal.proposalType)].executeTransaction(\\r\\n                proposal.targets[i],\\r\\n                proposal.values[i],\\r\\n                proposal.signatures[i],\\r\\n                proposal.calldatas[i],\\r\\n                proposal.eta\\r\\n            );\\r\\n        }\\r\\n        emit ProposalExecuted(proposalId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold\\r\\n     * @param proposalId The id of the proposal to cancel\\r\\n     */\\r\\n    function cancel(uint proposalId) external {\\r\\n        require(state(proposalId) != ProposalState.Executed, \\\"GovernorBravo::cancel: cannot cancel executed proposal\\\");\\r\\n\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        require(\\r\\n            msg.sender == guardian ||\\r\\n                msg.sender == proposal.proposer ||\\r\\n                eclVault.getPriorVotes(proposal.proposer, sub256(block.number, 1)) <\\r\\n                proposalConfigs[proposal.proposalType].proposalThreshold,\\r\\n            \\\"GovernorBravo::cancel: proposer above threshold\\\"\\r\\n        );\\r\\n\\r\\n        proposal.canceled = true;\\r\\n        for (uint i = 0; i < proposal.targets.length; i++) {\\r\\n            proposalTimelocks[proposal.proposalType].cancelTransaction(\\r\\n                proposal.targets[i],\\r\\n                proposal.values[i],\\r\\n                proposal.signatures[i],\\r\\n                proposal.calldatas[i],\\r\\n                proposal.eta\\r\\n            );\\r\\n        }\\r\\n\\r\\n        emit ProposalCanceled(proposalId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets actions of a proposal\\r\\n     * @param proposalId the id of the proposal\\r\\n     * \\r\\n     */\\r\\n    function getActions(\\r\\n        uint proposalId\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        returns (address[] memory targets, uint[] memory values, string[] memory signatures, bytes[] memory calldatas)\\r\\n    {\\r\\n        Proposal storage p = proposals[proposalId];\\r\\n        return (p.targets, p.values, p.signatures, p.calldatas);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the receipt for a voter on a given proposal\\r\\n     * @param proposalId the id of proposal\\r\\n     * @param voter The address of the voter\\r\\n     * @return address \\r\\n     */\\r\\n    function getReceipt(uint proposalId, address voter) external view returns (Receipt memory) {\\r\\n        return proposals[proposalId].receipts[voter];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Gets the state of a proposal\\r\\n     * @param proposalId The id of the proposal\\r\\n     * @return ProposalState\\r\\n     */\\r\\n    function state(uint proposalId) public view returns (ProposalState) {\\r\\n        require(\\r\\n            proposalCount >= proposalId && proposalId > initialProposalId,\\r\\n            \\\"GovernorBravo::state: invalid proposal id\\\"\\r\\n        );\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        if (proposal.canceled) {\\r\\n            return ProposalState.Canceled;\\r\\n        } else if (block.number <= proposal.startBlock) {\\r\\n            return ProposalState.Pending;\\r\\n        } else if (block.number <= proposal.endBlock) {\\r\\n            return ProposalState.Active;\\r\\n        } else if (proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes) {\\r\\n            return ProposalState.Defeated;\\r\\n        } else if (proposal.eta == 0) {\\r\\n            return ProposalState.Succeeded;\\r\\n        } else if (proposal.executed) {\\r\\n            return ProposalState.Executed;\\r\\n        } else if (\\r\\n            block.timestamp >= add256(proposal.eta, proposalTimelocks[uint8(proposal.proposalType)].GRACE_PERIOD())\\r\\n        ) {\\r\\n            return ProposalState.Expired;\\r\\n        } else {\\r\\n            return ProposalState.Queued;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Cast a vote for a proposal\\r\\n     * @param proposalId The id of the proposal to vote on\\r\\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\r\\n     */\\r\\n    function castVote(uint proposalId, uint8 support) external {\\r\\n        emit VoteCast(msg.sender, proposalId, support, castVoteInternal(msg.sender, proposalId, support), \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Cast a vote for a proposal with a reason\\r\\n     * @param proposalId The id of the proposal to vote on\\r\\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\r\\n     * @param reason The reason given for the vote by the voter\\r\\n     */\\r\\n    function castVoteWithReason(uint proposalId, uint8 support, string calldata reason) external {\\r\\n        emit VoteCast(msg.sender, proposalId, support, castVoteInternal(msg.sender, proposalId, support), reason);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Cast a vote for a proposal by signature\\r\\n     * @dev External function that accepts EIP-712 signatures for voting on proposals.\\r\\n     * @param proposalId The id of the proposal to vote on\\r\\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\r\\n     * @param v recovery id of ECDSA signature\\r\\n     * @param r part of the ECDSA sig output\\r\\n     * @param s part of the ECDSA sig output\\r\\n     */\\r\\n    function castVoteBySig(uint proposalId, uint8 support, uint8 v, bytes32 r, bytes32 s) external {\\r\\n        bytes32 domainSeparator = keccak256(\\r\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainIdInternal(), address(this))\\r\\n        );\\r\\n        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\\r\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\r\\n        address signatory = ecrecover(digest, v, r, s);\\r\\n        require(signatory != address(0), \\\"GovernorBravo::castVoteBySig: invalid signature\\\");\\r\\n        emit VoteCast(signatory, proposalId, support, castVoteInternal(signatory, proposalId, support), \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Internal function that caries out voting logic\\r\\n     * @param voter The voter that is casting their vote\\r\\n     * @param proposalId The id of the proposal to vote on\\r\\n     * @param support The support value for the vote. 0=against, 1=for, 2=abstain\\r\\n     * @return The number of votes cast\\r\\n     */\\r\\n    function castVoteInternal(address voter, uint proposalId, uint8 support) internal returns (uint96) {\\r\\n        require(state(proposalId) == ProposalState.Active, \\\"GovernorBravo::castVoteInternal: voting is closed\\\");\\r\\n        require(support <= 2, \\\"GovernorBravo::castVoteInternal: invalid vote type\\\");\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        Receipt storage receipt = proposal.receipts[voter];\\r\\n        require(receipt.hasVoted == false, \\\"GovernorBravo::castVoteInternal: voter already voted\\\");\\r\\n        uint96 votes = eclVault.getPriorVotes(voter, proposal.startBlock);\\r\\n\\r\\n        if (support == 0) {\\r\\n            proposal.againstVotes = add256(proposal.againstVotes, votes);\\r\\n        } else if (support == 1) {\\r\\n            proposal.forVotes = add256(proposal.forVotes, votes);\\r\\n        } else if (support == 2) {\\r\\n            proposal.abstainVotes = add256(proposal.abstainVotes, votes);\\r\\n        }\\r\\n\\r\\n        receipt.hasVoted = true;\\r\\n        receipt.support = support;\\r\\n        receipt.votes = votes;\\r\\n\\r\\n        return votes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Sets the new governance guardian\\r\\n     * @param newGuardian the address of the new guardian\\r\\n     */\\r\\n    function _setGuardian(address newGuardian) external {\\r\\n        require(msg.sender == guardian || msg.sender == owner, \\\"GovernorBravo::_setGuardian: owner or guardian only\\\");\\r\\n        require(newGuardian != address(0), \\\"GovernorBravo::_setGuardian: cannot live without a guardian\\\");\\r\\n        address oldGuardian = guardian;\\r\\n        guardian = newGuardian;\\r\\n\\r\\n        emit NewGuardian(oldGuardian, newGuardian);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Initiate the GovernorBravo contract\\r\\n     * @dev Owner only. Sets initial proposal id which initiates the contract, ensuring a continuous proposal id count\\r\\n     * @param governorAlpha The address for the Governor to continue the proposal id count from\\r\\n     */\\r\\n    function _initiate(address governorAlpha) external {\\r\\n        require(msg.sender == owner, \\\"GovernorBravo::_initiate: owner only\\\");\\r\\n        require(initialProposalId == 0, \\\"GovernorBravo::_initiate: can only initiate once\\\");\\r\\n        proposalCount = GovernorAlphaInterface(governorAlpha).proposalCount();\\r\\n        initialProposalId = proposalCount;\\r\\n        for (uint256 i; i < uint8(ProposalType.CRITICAL) + 1; ++i) {\\r\\n            proposalTimelocks[i].acceptOwner();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set max proposal operations\\r\\n     * @dev Owner only.\\r\\n     * @param proposalMaxOperations_ Max proposal operations\\r\\n     */\\r\\n    function _setProposalMaxOperations(uint proposalMaxOperations_) external {\\r\\n        require(msg.sender == owner, \\\"GovernorBravo::_setProposalMaxOperations: owner only\\\");\\r\\n        uint oldProposalMaxOperations = proposalMaxOperations;\\r\\n        proposalMaxOperations = proposalMaxOperations_;\\r\\n\\r\\n        emit ProposalMaxOperationsUpdated(oldProposalMaxOperations, proposalMaxOperations_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\r\\n     * @dev Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.\\r\\n     * @param newPendingOwner New pending owner.\\r\\n     */\\r\\n    function _setPendingOwner(address newPendingOwner) external {\\r\\n        // Check caller = owner\\r\\n        require(msg.sender == owner, \\\"GovernorBravo:_setPendingOwner: owner only\\\");\\r\\n\\r\\n        // Save current value, if any, for inclusion in log\\r\\n        address oldPendingOwner = pendingOwner;\\r\\n\\r\\n        // Store pendingOwner with value newPendingOwner\\r\\n        pendingOwner = newPendingOwner;\\r\\n\\r\\n        // Emit NewPendingOwner(oldPendingOwner, newPendingOwner)\\r\\n        emit NewPendingOwner(oldPendingOwner, newPendingOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Accepts transfer of owner rights. msg.sender must be pendingOwner\\r\\n     * @dev Owner function for pending owner to accept role and update owner\\r\\n     */\\r\\n    function _acceptOwner() external {\\r\\n        // Check caller is pendingOwner and pendingOwner \\u2260 address(0)\\r\\n        require(\\r\\n            msg.sender == pendingOwner && msg.sender != address(0),\\r\\n            \\\"GovernorBravo:_acceptOwner: pending owner only\\\"\\r\\n        );\\r\\n\\r\\n        // Save current values for inclusion in log\\r\\n        address oldOwner = owner;\\r\\n        address oldPendingOwner = pendingOwner;\\r\\n\\r\\n        // Store owner with value pendingOwner\\r\\n        owner = pendingOwner;\\r\\n\\r\\n        // Clear the pending value\\r\\n        pendingOwner = address(0);\\r\\n\\r\\n        emit NewOwner(oldOwner, owner);\\r\\n        emit NewPendingOwner(oldPendingOwner, pendingOwner);\\r\\n    }\\r\\n\\r\\n    function add256(uint256 a, uint256 b) internal pure returns (uint) {\\r\\n        uint c = a + b;\\r\\n        require(c >= a, \\\"addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub256(uint256 a, uint256 b) internal pure returns (uint) {\\r\\n        require(b <= a, \\\"subtraction underflow\\\");\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function getChainIdInternal() internal view returns (uint) {\\r\\n        uint chainId;\\r\\n        assembly {\\r\\n            chainId := chainid()\\r\\n        }\\r\\n        return chainId;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xd3fcd5c535526c6fa5143a34879e6277ca433bff097150511df1419812067960\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b506140308061001f6000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80637bdbe4d011610130578063deaaa7cc116100b8578063ee9799ee1161007c578063ee9799ee14610645578063f9d28b801461066e578063fc4d33f914610681578063fc4eee4214610689578063fe0d94c11461069257600080fd5b8063deaaa7cc146105ad578063e23a9a52146105d4578063e30c397814610617578063e38e8c0f1461062a578063e48083fe1461063d57600080fd5b8063a64e024a116100ff578063a64e024a1461056a578063b112626314610574578063d33219b41461057e578063da35c66414610591578063ddf0b0091461059a57600080fd5b80637bdbe4d0146105285780638da5cb5b1461053157806395c732af146105445780639e6f26261461055757600080fd5b8063328dd982116101be578063452a932011610182578063452a9320146104b357806356781388146104de5780636e96dfd7146104f1578063791f5d23146105045780637b3c71d31461051557600080fd5b8063328dd9821461040057806335a87de2146104235780633bccf4fd1461046d5780633e4f49e61461048057806340e58ee5146104a057600080fd5b80631ebcfefd116102055780631ebcfefd1461039957806320606b70146103ae578063215809ca146103d557806324bc1a64146103de57806325fd935a146103ef57600080fd5b8063013cf08b1461023757806306fdde0314610316578063164a1ab11461035857806317977c6114610379575b600080fd5b6102af61024536600461327a565b6004602052600090815260409020805460018201546002830154600784015460088501546009860154600a870154600b880154600c890154600e9099015497986001600160a01b039097169795969495939492939192909160ff808316926101009004811691168b565b604080519b8c526001600160a01b03909a1660208c0152988a01979097526060890195909552608088019390935260a087019190915260c086015260e08501521515610100840152151561012083015260ff16610140820152610160015b60405180910390f35b61034b60405180604001604052806016815260200175456e636c61627320476f7665726e6f7220427261766f60501b81525081565b60405161030d91906132e3565b61036b61036636600461362b565b6106a5565b60405190815260200161030d565b61036b61038736600461370c565b60056020526000908152604090205481565b6103ac6103a736600461327a565b610dc0565b005b61036b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61036b610e1081565b61036b697f0e10af47c1c700000081565b61036b693f870857a3e0e380000081565b61041361040e36600461327a565b610e7d565b60405161030d94939291906137f9565b61045261043136600461327a565b600a6020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161030d565b6103ac61047b366004613862565b61110e565b61049361048e36600461327a565b61138a565b60405161030d91906138c6565b6103ac6104ae36600461327a565b611557565b6007546104c6906001600160a01b031681565b6040516001600160a01b03909116815260200161030d565b6103ac6104ec3660046138ee565b6118a0565b6103ac6104ff36600461370c565b61190b565b61036b691fc3842bd1f071c0000081565b6103ac61052336600461391a565b6119d2565b61036b60065481565b6008546104c6906001600160a01b031681565b6003546104c6906001600160a01b031681565b6103ac610565366004613a09565b611a22565b61036b6206270081565b61036b6203138081565b6002546104c6906001600160a01b031681565b61036b60015481565b6103ac6105a836600461327a565b61213b565b61036b7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b6105e76105e2366004613b14565b612451565b6040805182511515815260208084015160ff1690820152918101516001600160601b03169082015260600161030d565b6009546104c6906001600160a01b031681565b6103ac61063836600461370c565b6124c9565b61036b600181565b6104c661065336600461327a565b600b602052600090815260409020546001600160a01b031681565b6103ac61067c36600461370c565b61262a565b6103ac6127f1565b61036b60005481565b6103ac6106a036600461327a565b61291b565b600080546000036107175760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f72427261766f3a3a70726f706f73653a20476f7665726e6f7260448201527020427261766f206e6f742061637469766560781b60648201526084015b60405180910390fd5b600a600083600281111561072d5761072d6138b0565b60ff1681526020810191909152604001600020600201546003546001600160a01b031663782d6fe133610761436001612b42565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156107aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ce9190613b44565b6001600160601b0316101561084b5760405162461bcd60e51b815260206004820152603f60248201527f476f7665726e6f72427261766f3a3a70726f706f73653a2070726f706f73657260448201527f20766f7465732062656c6f772070726f706f73616c207468726573686f6c6400606482015260840161070e565b8551875114801561085d575084518751145b801561086a575083518751145b6108ea5760405162461bcd60e51b8152602060048201526044602482018190527f476f7665726e6f72427261766f3a3a70726f706f73653a2070726f706f73616c908201527f2066756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d6064820152630c2e8c6d60e31b608482015260a40161070e565b86516000036109505760405162461bcd60e51b815260206004820152602c60248201527f476f7665726e6f72427261766f3a3a70726f706f73653a206d7573742070726f60448201526b7669646520616374696f6e7360a01b606482015260840161070e565b600654875111156109b45760405162461bcd60e51b815260206004820152602860248201527f476f7665726e6f72427261766f3a3a70726f706f73653a20746f6f206d616e7960448201526720616374696f6e7360c01b606482015260840161070e565b336000908152600560205260409020548015610b335760006109d58261138a565b905060018160078111156109eb576109eb6138b0565b03610a845760405162461bcd60e51b815260206004820152605860248201527f476f7665726e6f72427261766f3a3a70726f706f73653a206f6e65206c69766560448201527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60648201527f20616c7265616479206163746976652070726f706f73616c0000000000000000608482015260a40161070e565b6000816007811115610a9857610a986138b0565b03610b315760405162461bcd60e51b815260206004820152605960248201527f476f7665726e6f72427261766f3a3a70726f706f73653a206f6e65206c69766560448201527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60648201527f20616c72656164792070656e64696e672070726f706f73616c00000000000000608482015260a40161070e565b505b6000610b6943600a6000876002811115610b4f57610b4f6138b0565b60ff16815260200190815260200160002060000154612b9d565b90506000610ba182600a6000886002811115610b8757610b876138b0565b60ff16815260200190815260200160002060010154612b9d565b600180549192506000610bb383613b83565b909155505060018054600081815260046020908152604080832093845592840180546001600160a01b031916331790558354825282822060020182905592548152208b51610c09926003909201918d01906130aa565b5060015460009081526004602081815260409092208b51610c32939190920191908c019061310f565b5060015460009081526004602090815260409091208951610c5b926005909201918b019061314a565b5060015460009081526004602090815260409091208851610c84926006909201918a019061319c565b5060018054600090815260046020526040808220600701859055825482528082206008018490558254825280822060090182905582548252808220600a0182905582548252808220600b0182905582548252808220600c908101805460ff1916905592548252902001805461ff0019169055846002811115610d0857610d086138b0565b600180546000908152600460209081526040808320600e01805460ff191660ff96909616959095179094558254808352848320909301546001600160a01b0316825260059052919091208190557fc8df7ff219f3c0358e14500814d8b62b443a4bebf3a596baa60b9295b1cf1bde90338c8c8c8c88888e8e6002811115610d9157610d916138b0565b604051610da79a99989796959493929190613b9c565b60405180910390a1505060015498975050505050505050565b6008546001600160a01b03163314610e375760405162461bcd60e51b815260206004820152603460248201527f476f7665726e6f72427261766f3a3a5f73657450726f706f73616c4d61784f7060448201527365726174696f6e733a206f776e6572206f6e6c7960601b606482015260840161070e565b600680549082905560408051828152602081018490527fd03b3c3c5c1446bcdd31423061041c94ca3bc5450fe7ccfb0f636f4c420de87e91015b60405180910390a15050565b60608060608060006004600087815260200190815260200160002090508060030181600401826005018360060183805480602002602001604051908101604052809291908181526020018280548015610eff57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ee1575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015610f5157602002820191906000526020600020905b815481526020019060010190808311610f3d575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b82821015611025578382906000526020600020018054610f9890613c40565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc490613c40565b80156110115780601f10610fe657610100808354040283529160200191611011565b820191906000526020600020905b815481529060010190602001808311610ff457829003601f168201915b505050505081526020019060010190610f79565b50505050915080805480602002602001604051908101604052809291908181526020016000905b828210156110f857838290600052602060002001805461106b90613c40565b80601f016020809104026020016040519081016040528092919081815260200182805461109790613c40565b80156110e45780601f106110b9576101008083540402835291602001916110e4565b820191906000526020600020905b8154815290600101906020018083116110c757829003601f168201915b50505050508152602001906001019061104c565b5050505090509450945094509450509193509193565b6040805180820182526016815275456e636c61627320476f7665726e6f7220427261766f60501b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527fc05d8de58100958f8c2b79b9de5de75fb0cd927d9820f124296651b356f16b1c81840152466060820152306080808301919091528351808303909101815260a0820184528051908301207f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f60c083015260e0820189905260ff8816610100808401919091528451808403909101815261012083019094528351939092019290922061190160f01b6101408401526101428301829052610162830181905290916000906101820160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015611294573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661130f5760405162461bcd60e51b815260206004820152602f60248201527f476f7665726e6f72427261766f3a3a63617374566f746542795369673a20696e60448201526e76616c6964207369676e617475726560881b606482015260840161070e565b806001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48a8a611347858e8e612bf0565b6040805193845260ff90921660208401526001600160601b03169082015260806060820181905260009082015260a00160405180910390a2505050505050505050565b6000816001541015801561139f575060005482115b6113fd5760405162461bcd60e51b815260206004820152602960248201527f476f7665726e6f72427261766f3a3a73746174653a20696e76616c69642070726044820152681bdc1bdcd85b081a5960ba1b606482015260840161070e565b6000828152600460205260409020600c81015460ff16156114215750600292915050565b806007015443116114355750600092915050565b806008015443116114495750600192915050565b80600a0154816009015411158061146d5750697f0e10af47c1c70000008160090154105b1561147b5750600392915050565b80600201546000036114905750600492915050565b600c810154610100900460ff16156114ab5750600792915050565b6002810154600e82015460ff166000908152600b60209081526040918290205482516360d143f160e11b8152925161153994936001600160a01b039092169263c1a287e292600480820193918290030181865afa158015611510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115349190613c74565b612b9d565b42106115485750600692915050565b50600592915050565b50919050565b60076115628261138a565b6007811115611573576115736138b0565b036115df5760405162461bcd60e51b815260206004820152603660248201527f476f7665726e6f72427261766f3a3a63616e63656c3a2063616e6e6f742063616044820152751b98d95b08195e1958dd5d1959081c1c9bdc1bdcd85b60521b606482015260840161070e565b60008181526004602052604090206007546001600160a01b0316331480611612575060018101546001600160a01b031633145b806116d35750600e81015460ff166000908152600a60205260409020600201546003546001808401546001600160a01b039283169263782d6fe19291169061165b904390612b42565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c89190613b44565b6001600160601b0316105b6117375760405162461bcd60e51b815260206004820152602f60248201527f476f7665726e6f72427261766f3a3a63616e63656c3a2070726f706f7365722060448201526e18589bdd99481d1a1c995cda1bdb19608a1b606482015260840161070e565b600c8101805460ff1916600117905560005b600382015481101561186f57600e82015460ff166000908152600b60205260409020546003830180546001600160a01b039092169163591fcdfe91908490811061179557611795613c8d565b6000918252602090912001546004850180546001600160a01b0390921691859081106117c3576117c3613c8d565b90600052602060002001548560050185815481106117e3576117e3613c8d565b9060005260206000200186600601868154811061180257611802613c8d565b9060005260206000200187600201546040518663ffffffff1660e01b8152600401611831959493929190613d20565b600060405180830381600087803b15801561184b57600080fd5b505af115801561185f573d6000803e3d6000fd5b5050600190920191506117499050565b506040518281527f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90602001610e71565b337fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda483836118cf848383612bf0565b6040805193845260ff90921660208401526001600160601b03169082015260806060820181905260009082015260a00160405180910390a25050565b6008546001600160a01b031633146119785760405162461bcd60e51b815260206004820152602a60248201527f476f7665726e6f72427261766f3a5f73657450656e64696e674f776e65723a206044820152696f776e6572206f6e6c7960b01b606482015260840161070e565b600980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b9101610e71565b337fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48585611a01848383612bf0565b8686604051611a14959493929190613d6c565b60405180910390a250505050565b60008052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76546001600160a01b031615611abe5760405162461bcd60e51b815260206004820152603260248201527f476f7665726e6f72427261766f3a3a696e697469616c697a653a2063616e6e6f6044820152717420696e697469616c697a6520747769636560701b606482015260840161070e565b6001600160a01b038416611b195760405162461bcd60e51b815260206004820152602e6024820152600080516020613fdb83398151915260448201526d69642065636c206164647265737360901b606482015260840161070e565b6001600160a01b038116611b715760405162461bcd60e51b815260206004820152602b6024820152600080516020613fdb83398151915260448201526a34b21033bab0b93234b0b760a91b606482015260840161070e565b611b7d60026001613dbc565b60ff16825114611c145760405162461bcd60e51b815260206004820152605660248201527f476f7665726e6f72427261766f3a3a696e697469616c697a653a6e756d62657260448201527f206f662074696d656c6f636b732073686f756c64206d61746368206e756d626560648201527572206f6620676f7665726e616e636520726f7574657360501b608482015260a40161070e565b611c2060026001613dbc565b60ff16835114611cbe5760405162461bcd60e51b815260206004820152605d60248201527f476f7665726e6f72427261766f3a3a696e697469616c697a653a6e756d62657260448201527f206f662070726f706f73616c20636f6e666967732073686f756c64206d61746360648201527f68206e756d626572206f6620676f7665726e616e636520726f75746573000000608482015260a40161070e565b60088054336001600160a01b0319918216179091556003805482166001600160a01b0387811691909117909155600a60065560078054909216908316179055825160005b8181101561213357610e10858281518110611d1f57611d1f613c8d565b6020026020010151602001511015611d845760405162461bcd60e51b81526020600482015260346024820152600080516020613fdb8339815191526044820152731a59081b5a5b881d9bdd1a5b99c81c195c9a5bd960621b606482015260840161070e565b62062700858281518110611d9a57611d9a613c8d565b6020026020010151602001511115611dff5760405162461bcd60e51b81526020600482015260346024820152600080516020613fdb8339815191526044820152731a59081b585e081d9bdd1a5b99c81c195c9a5bd960621b606482015260840161070e565b6001858281518110611e1357611e13613c8d565b6020026020010151600001511015611e775760405162461bcd60e51b81526020600482015260336024820152600080516020613fdb8339815191526044820152726964206d696e20766f74696e672064656c617960681b606482015260840161070e565b62031380858281518110611e8d57611e8d613c8d565b6020026020010151600001511115611ef15760405162461bcd60e51b81526020600482015260336024820152600080516020613fdb8339815191526044820152726964206d617820766f74696e672064656c617960681b606482015260840161070e565b691fc3842bd1f071c00000858281518110611f0e57611f0e613c8d565b6020026020010151604001511015611f7c5760405162461bcd60e51b81526020600482015260396024820152600080516020613fdb83398151915260448201527f6964206d696e2070726f706f73616c207468726573686f6c6400000000000000606482015260840161070e565b693f870857a3e0e3800000858281518110611f9957611f99613c8d565b60200260200101516040015111156120075760405162461bcd60e51b81526020600482015260396024820152600080516020613fdb83398151915260448201527f6964206d61782070726f706f73616c207468726573686f6c6400000000000000606482015260840161070e565b60006001600160a01b031684828151811061202457612024613c8d565b60200260200101516001600160a01b03160361209d5760405162461bcd60e51b815260206004820152603260248201527f476f7665726e6f72427261766f3a3a696e697469616c697a653a696e76616c69604482015271642074696d656c6f636b206164647265737360701b606482015260840161070e565b8481815181106120af576120af613c8d565b6020908102919091018101516000838152600a835260409081902082518155928201516001840155015160029091015583518490829081106120f3576120f3613c8d565b6020908102919091018101516000838152600b909252604090912080546001600160a01b0319166001600160a01b03909216919091179055600101611d02565b505050505050565b60046121468261138a565b6007811115612157576121576138b0565b146121d85760405162461bcd60e51b8152602060048201526044602482018190527f476f7665726e6f72427261766f3a3a71756575653a2070726f706f73616c2063908201527f616e206f6e6c79206265207175657565642069662069742069732073756363656064820152631959195960e21b608482015260a40161070e565b6000818152600460208181526040808420600e81015460ff168552600b8352818520548251630d48571f60e31b815292519195946122429442946001600160a01b0390931693636a42b8f89380840193908290030181865afa158015611510573d6000803e3d6000fd5b905060005b600383015481101561240b5761240383600301828154811061226b5761226b613c8d565b6000918252602090912001546004850180546001600160a01b03909216918490811061229957612299613c8d565b90600052602060002001548560050184815481106122b9576122b9613c8d565b9060005260206000200180546122ce90613c40565b80601f01602080910402602001604051908101604052809291908181526020018280546122fa90613c40565b80156123475780601f1061231c57610100808354040283529160200191612347565b820191906000526020600020905b81548152906001019060200180831161232a57829003601f168201915b505050505086600601858154811061236157612361613c8d565b90600052602060002001805461237690613c40565b80601f01602080910402602001604051908101604052809291908181526020018280546123a290613c40565b80156123ef5780601f106123c4576101008083540402835291602001916123ef565b820191906000526020600020905b8154815290600101906020018083116123d257829003601f168201915b50505050600e89015488915060ff16612ed0565b600101612247565b506002820181905560408051848152602081018390527f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892910160405180910390a1505050565b604080516060808201835260008083526020808401829052928401819052858152600483528381206001600160a01b0386168252600d018352839020835191820184525460ff8082161515835261010082041692820192909252620100009091046001600160601b0316918101919091525b92915050565b6007546001600160a01b03163314806124ec57506008546001600160a01b031633145b6125545760405162461bcd60e51b815260206004820152603360248201527f476f7665726e6f72427261766f3a3a5f736574477561726469616e3a206f776e6044820152726572206f7220677561726469616e206f6e6c7960681b606482015260840161070e565b6001600160a01b0381166125d05760405162461bcd60e51b815260206004820152603b60248201527f476f7665726e6f72427261766f3a3a5f736574477561726469616e3a2063616e60448201527f6e6f74206c69766520776974686f7574206120677561726469616e0000000000606482015260840161070e565b600780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f08fdaf06427a2010e5958f4329b566993472d14ce81d3f16ce7f2a2660da98e39101610e71565b6008546001600160a01b031633146126905760405162461bcd60e51b8152602060048201526024808201527f476f7665726e6f72427261766f3a3a5f696e6974696174653a206f776e6572206044820152636f6e6c7960e01b606482015260840161070e565b600054156126f95760405162461bcd60e51b815260206004820152603060248201527f476f7665726e6f72427261766f3a3a5f696e6974696174653a2063616e206f6e60448201526f6c7920696e697469617465206f6e636560801b606482015260840161070e565b806001600160a01b031663da35c6646040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275d9190613c74565b600181905560009081555b61277460026001613dbc565b60ff168110156127ed576000818152600b602052604080822054815163ebbc496560e01b815291516001600160a01b039091169263ebbc4965926004808201939182900301818387803b1580156127ca57600080fd5b505af11580156127de573d6000803e3d6000fd5b50505050806001019050612768565b5050565b6009546001600160a01b03163314801561280a57503315155b61286d5760405162461bcd60e51b815260206004820152602e60248201527f476f7665726e6f72427261766f3a5f6163636570744f776e65723a2070656e6460448201526d696e67206f776e6572206f6e6c7960901b606482015260840161070e565b60088054600980546001600160a01b038082166001600160a01b031980861682179096559490911690915560408051919092168082526020820184905292917f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364910160405180910390a1600954604080516001600160a01b03808516825290921660208301527fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b9101610e71565b60056129268261138a565b6007811115612937576129376138b0565b146129b85760405162461bcd60e51b815260206004820152604560248201527f476f7665726e6f72427261766f3a3a657865637574653a2070726f706f73616c60448201527f2063616e206f6e6c7920626520657865637574656420696620697420697320716064820152641d595d595960da1b608482015260a40161070e565b6000818152600460205260408120600c8101805461ff001916610100179055905b6003820154811015612b1157600e82015460ff166000908152600b60205260409020546003830180546001600160a01b0390921691630825f38f919084908110612a2557612a25613c8d565b6000918252602090912001546004850180546001600160a01b039092169185908110612a5357612a53613c8d565b9060005260206000200154856005018581548110612a7357612a73613c8d565b90600052602060002001866006018681548110612a9257612a92613c8d565b9060005260206000200187600201546040518663ffffffff1660e01b8152600401612ac1959493929190613d20565b6000604051808303816000875af1158015612ae0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b089190810190613dd5565b506001016129d9565b506040518281527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90602001610e71565b600082821115612b8c5760405162461bcd60e51b81526020600482015260156024820152747375627472616374696f6e20756e646572666c6f7760581b604482015260640161070e565b612b968284613e4c565b9392505050565b600080612baa8385613e5f565b905083811015612b965760405162461bcd60e51b81526020600482015260116024820152706164646974696f6e206f766572666c6f7760781b604482015260640161070e565b60006001612bfd8461138a565b6007811115612c0e57612c0e6138b0565b14612c755760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f72427261766f3a3a63617374566f7465496e7465726e616c3a604482015270081d9bdd1a5b99c81a5cc818db1bdcd959607a1b606482015260840161070e565b60028260ff161115612ce45760405162461bcd60e51b815260206004820152603260248201527f476f7665726e6f72427261766f3a3a63617374566f7465496e7465726e616c3a60448201527120696e76616c696420766f7465207479706560701b606482015260840161070e565b60008381526004602090815260408083206001600160a01b0388168452600d8101909252909120805460ff1615612d7a5760405162461bcd60e51b815260206004820152603460248201527f476f7665726e6f72427261766f3a3a63617374566f7465496e7465726e616c3a604482015273081d9bdd195c88185b1c9958591e481d9bdd195960621b606482015260840161070e565b600354600783015460405163782d6fe160e01b81526000926001600160a01b03169163782d6fe191612dc4918b916004016001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015612de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e059190613b44565b90508460ff16600003612e3357612e2983600a0154826001600160601b0316612b9d565b600a840155612e87565b8460ff16600103612e5f57612e558360090154826001600160601b0316612b9d565b6009840155612e87565b8460ff16600203612e8757612e8183600b0154826001600160601b0316612b9d565b600b8401555b81546001600160601b03821662010000026dffffffffffffffffffffffff00001960ff88166101000261ffff199093169290921760011791909116179091559150509392505050565b60ff81166000908152600b60209081526040918290205491516001600160a01b039092169163f2b0653791612f0f918a918a918a918a918a9101613e72565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612f4391815260200190565b602060405180830381865afa158015612f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f849190613eab565b156130155760405162461bcd60e51b815260206004820152605560248201527f476f7665726e6f72427261766f3a3a71756575654f72526576657274496e746560448201527f726e616c3a206964656e746963616c2070726f706f73616c20616374696f6e20606482015274616c7265616479207175657565642061742065746160581b608482015260a40161070e565b60ff81166000908152600b602052604090819020549051633a66f90160e01b81526001600160a01b0390911690633a66f9019061305e9089908990899089908990600401613e72565b6020604051808303816000875af115801561307d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a19190613c74565b50505050505050565b8280548282559060005260206000209081019282156130ff579160200282015b828111156130ff57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906130ca565b5061310b9291506131ee565b5090565b8280548282559060005260206000209081019282156130ff579160200282015b828111156130ff57825182559160200191906001019061312f565b828054828255906000526020600020908101928215613190579160200282015b8281111561319057825182906131809082613f1a565b509160200191906001019061316a565b5061310b929150613203565b8280548282559060005260206000209081019282156131e2579160200282015b828111156131e257825182906131d29082613f1a565b50916020019190600101906131bc565b5061310b929150613220565b5b8082111561310b57600081556001016131ef565b8082111561310b576000613217828261323d565b50600101613203565b8082111561310b576000613234828261323d565b50600101613220565b50805461324990613c40565b6000825580601f10613259575050565b601f01602090049060005260206000209081019061327791906131ee565b50565b60006020828403121561328c57600080fd5b5035919050565b60005b838110156132ae578181015183820152602001613296565b50506000910152565b600081518084526132cf816020860160208601613293565b601f01601f19169290920160200192915050565b602081526000612b9660208301846132b7565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561332f5761332f6132f6565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561335e5761335e6132f6565b604052919050565b600067ffffffffffffffff821115613380576133806132f6565b5060051b60200190565b6001600160a01b038116811461327757600080fd5b80356133aa8161338a565b919050565b600082601f8301126133c057600080fd5b813560206133d56133d083613366565b613335565b8083825260208201915060208460051b8701019350868411156133f757600080fd5b602086015b8481101561341c57803561340f8161338a565b83529183019183016133fc565b509695505050505050565b600082601f83011261343857600080fd5b813560206134486133d083613366565b8083825260208201915060208460051b87010193508684111561346a57600080fd5b602086015b8481101561341c578035835291830191830161346f565b600067ffffffffffffffff8211156134a0576134a06132f6565b50601f01601f191660200190565b60006134bc6133d084613486565b90508281528383830111156134d057600080fd5b828260208301376000602084830101529392505050565b600082601f8301126134f857600080fd5b612b96838335602085016134ae565b600082601f83011261351857600080fd5b813560206135286133d083613366565b82815260059290921b8401810191818101908684111561354757600080fd5b8286015b8481101561341c57803567ffffffffffffffff81111561356b5760008081fd5b6135798986838b01016134e7565b84525091830191830161354b565b600082601f83011261359857600080fd5b813560206135a86133d083613366565b82815260059290921b840181019181810190868411156135c757600080fd5b8286015b8481101561341c57803567ffffffffffffffff8111156135eb5760008081fd5b8701603f810189136135fd5760008081fd5b61360e8986830135604084016134ae565b8452509183019183016135cb565b8035600381106133aa57600080fd5b60008060008060008060c0878903121561364457600080fd5b863567ffffffffffffffff8082111561365c57600080fd5b6136688a838b016133af565b9750602089013591508082111561367e57600080fd5b61368a8a838b01613427565b965060408901359150808211156136a057600080fd5b6136ac8a838b01613507565b955060608901359150808211156136c257600080fd5b6136ce8a838b01613587565b945060808901359150808211156136e457600080fd5b506136f189828a016134e7565b92505061370060a0880161361c565b90509295509295509295565b60006020828403121561371e57600080fd5b8135612b968161338a565b60008151808452602080850194506020840160005b838110156137635781516001600160a01b03168752958201959082019060010161373e565b509495945050505050565b60008151808452602080850194506020840160005b8381101561376357815187529582019590820190600101613783565b60008282518085526020808601955060208260051b8401016020860160005b848110156137ec57601f198684030189526137da8383516132b7565b988401989250908301906001016137be565b5090979650505050505050565b60808152600061380c6080830187613729565b828103602084015261381e818761376e565b90508281036040840152613832818661379f565b90508281036060840152613846818561379f565b979650505050505050565b803560ff811681146133aa57600080fd5b600080600080600060a0868803121561387a57600080fd5b8535945061388a60208701613851565b935061389860408701613851565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b60208101600883106138e857634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561390157600080fd5b8235915061391160208401613851565b90509250929050565b6000806000806060858703121561393057600080fd5b8435935061394060208601613851565b9250604085013567ffffffffffffffff8082111561395d57600080fd5b818701915087601f83011261397157600080fd5b81358181111561398057600080fd5b88602082850101111561399257600080fd5b95989497505060200194505050565b600082601f8301126139b257600080fd5b813560206139c26133d083613366565b8083825260208201915060208460051b8701019350868411156139e457600080fd5b602086015b8481101561341c5780356139fc8161338a565b83529183019183016139e9565b60008060008060808587031215613a1f57600080fd5b8435613a2a8161338a565b935060208581013567ffffffffffffffff80821115613a4857600080fd5b818801915088601f830112613a5c57600080fd5b8135613a6a6133d082613366565b8181526060918202840185019185820191908c841115613a8957600080fd5b948601945b83861015613ad35780868e031215613aa65760008081fd5b613aae61330c565b8635815287870135888201526040808801359082015283529485019491860191613a8e565b50975050506040880135925080831115613aec57600080fd5b5050613afa878288016139a1565b925050613b096060860161339f565b905092959194509250565b60008060408385031215613b2757600080fd5b823591506020830135613b398161338a565b809150509250929050565b600060208284031215613b5657600080fd5b81516001600160601b0381168114612b9657600080fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613b9557613b95613b6d565b5060010190565b8a81526001600160a01b038a16602082015261014060408201819052600090613bc78382018c613729565b90508281036060840152613bdb818b61376e565b90508281036080840152613bef818a61379f565b905082810360a0840152613c03818961379f565b90508660c08401528560e0840152828103610100840152613c2481866132b7565b91505060ff83166101208301529b9a5050505050505050505050565b600181811c90821680613c5457607f821691505b60208210810361155157634e487b7160e01b600052602260045260246000fd5b600060208284031215613c8657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008154613cb081613c40565b808552602060018381168015613ccd5760018114613ce757613d15565b60ff1985168884015283151560051b880183019550613d15565b866000528260002060005b85811015613d0d5781548a8201860152908301908401613cf2565b890184019650505b505050505092915050565b60018060a01b038616815284602082015260a060408201526000613d4760a0830186613ca3565b8281036060840152613d598186613ca3565b9150508260808301529695505050505050565b85815260ff851660208201526001600160601b038416604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60ff81811683821601908111156124c3576124c3613b6d565b600060208284031215613de757600080fd5b815167ffffffffffffffff811115613dfe57600080fd5b8201601f81018413613e0f57600080fd5b8051613e1d6133d082613486565b818152856020838501011115613e3257600080fd5b613e43826020830160208601613293565b95945050505050565b818103818111156124c3576124c3613b6d565b808201808211156124c3576124c3613b6d565b60018060a01b038616815284602082015260a060408201526000613e9960a08301866132b7565b8281036060840152613d5981866132b7565b600060208284031215613ebd57600080fd5b81518015158114612b9657600080fd5b601f821115613f15576000816000526020600020601f850160051c81016020861015613ef65750805b601f850160051c820191505b8181101561213357828155600101613f02565b505050565b815167ffffffffffffffff811115613f3457613f346132f6565b613f4881613f428454613c40565b84613ecd565b602080601f831160018114613f7d5760008415613f655750858301515b600019600386901b1c1916600185901b178555612133565b600085815260208120601f198616915b82811015613fac57888601518255948401946001909101908401613f8d565b5085821015613fca5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616ca2646970667358221220b60676e985c631a48ce977c94957d82bde67cdf347918372aa533c82b13b927164736f6c63430008190033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c80637bdbe4d011610130578063deaaa7cc116100b8578063ee9799ee1161007c578063ee9799ee14610645578063f9d28b801461066e578063fc4d33f914610681578063fc4eee4214610689578063fe0d94c11461069257600080fd5b8063deaaa7cc146105ad578063e23a9a52146105d4578063e30c397814610617578063e38e8c0f1461062a578063e48083fe1461063d57600080fd5b8063a64e024a116100ff578063a64e024a1461056a578063b112626314610574578063d33219b41461057e578063da35c66414610591578063ddf0b0091461059a57600080fd5b80637bdbe4d0146105285780638da5cb5b1461053157806395c732af146105445780639e6f26261461055757600080fd5b8063328dd982116101be578063452a932011610182578063452a9320146104b357806356781388146104de5780636e96dfd7146104f1578063791f5d23146105045780637b3c71d31461051557600080fd5b8063328dd9821461040057806335a87de2146104235780633bccf4fd1461046d5780633e4f49e61461048057806340e58ee5146104a057600080fd5b80631ebcfefd116102055780631ebcfefd1461039957806320606b70146103ae578063215809ca146103d557806324bc1a64146103de57806325fd935a146103ef57600080fd5b8063013cf08b1461023757806306fdde0314610316578063164a1ab11461035857806317977c6114610379575b600080fd5b6102af61024536600461327a565b6004602052600090815260409020805460018201546002830154600784015460088501546009860154600a870154600b880154600c890154600e9099015497986001600160a01b039097169795969495939492939192909160ff808316926101009004811691168b565b604080519b8c526001600160a01b03909a1660208c0152988a01979097526060890195909552608088019390935260a087019190915260c086015260e08501521515610100840152151561012083015260ff16610140820152610160015b60405180910390f35b61034b60405180604001604052806016815260200175456e636c61627320476f7665726e6f7220427261766f60501b81525081565b60405161030d91906132e3565b61036b61036636600461362b565b6106a5565b60405190815260200161030d565b61036b61038736600461370c565b60056020526000908152604090205481565b6103ac6103a736600461327a565b610dc0565b005b61036b7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61036b610e1081565b61036b697f0e10af47c1c700000081565b61036b693f870857a3e0e380000081565b61041361040e36600461327a565b610e7d565b60405161030d94939291906137f9565b61045261043136600461327a565b600a6020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161030d565b6103ac61047b366004613862565b61110e565b61049361048e36600461327a565b61138a565b60405161030d91906138c6565b6103ac6104ae36600461327a565b611557565b6007546104c6906001600160a01b031681565b6040516001600160a01b03909116815260200161030d565b6103ac6104ec3660046138ee565b6118a0565b6103ac6104ff36600461370c565b61190b565b61036b691fc3842bd1f071c0000081565b6103ac61052336600461391a565b6119d2565b61036b60065481565b6008546104c6906001600160a01b031681565b6003546104c6906001600160a01b031681565b6103ac610565366004613a09565b611a22565b61036b6206270081565b61036b6203138081565b6002546104c6906001600160a01b031681565b61036b60015481565b6103ac6105a836600461327a565b61213b565b61036b7f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f81565b6105e76105e2366004613b14565b612451565b6040805182511515815260208084015160ff1690820152918101516001600160601b03169082015260600161030d565b6009546104c6906001600160a01b031681565b6103ac61063836600461370c565b6124c9565b61036b600181565b6104c661065336600461327a565b600b602052600090815260409020546001600160a01b031681565b6103ac61067c36600461370c565b61262a565b6103ac6127f1565b61036b60005481565b6103ac6106a036600461327a565b61291b565b600080546000036107175760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f72427261766f3a3a70726f706f73653a20476f7665726e6f7260448201527020427261766f206e6f742061637469766560781b60648201526084015b60405180910390fd5b600a600083600281111561072d5761072d6138b0565b60ff1681526020810191909152604001600020600201546003546001600160a01b031663782d6fe133610761436001612b42565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156107aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ce9190613b44565b6001600160601b0316101561084b5760405162461bcd60e51b815260206004820152603f60248201527f476f7665726e6f72427261766f3a3a70726f706f73653a2070726f706f73657260448201527f20766f7465732062656c6f772070726f706f73616c207468726573686f6c6400606482015260840161070e565b8551875114801561085d575084518751145b801561086a575083518751145b6108ea5760405162461bcd60e51b8152602060048201526044602482018190527f476f7665726e6f72427261766f3a3a70726f706f73653a2070726f706f73616c908201527f2066756e6374696f6e20696e666f726d6174696f6e206172697479206d69736d6064820152630c2e8c6d60e31b608482015260a40161070e565b86516000036109505760405162461bcd60e51b815260206004820152602c60248201527f476f7665726e6f72427261766f3a3a70726f706f73653a206d7573742070726f60448201526b7669646520616374696f6e7360a01b606482015260840161070e565b600654875111156109b45760405162461bcd60e51b815260206004820152602860248201527f476f7665726e6f72427261766f3a3a70726f706f73653a20746f6f206d616e7960448201526720616374696f6e7360c01b606482015260840161070e565b336000908152600560205260409020548015610b335760006109d58261138a565b905060018160078111156109eb576109eb6138b0565b03610a845760405162461bcd60e51b815260206004820152605860248201527f476f7665726e6f72427261766f3a3a70726f706f73653a206f6e65206c69766560448201527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60648201527f20616c7265616479206163746976652070726f706f73616c0000000000000000608482015260a40161070e565b6000816007811115610a9857610a986138b0565b03610b315760405162461bcd60e51b815260206004820152605960248201527f476f7665726e6f72427261766f3a3a70726f706f73653a206f6e65206c69766560448201527f2070726f706f73616c207065722070726f706f7365722c20666f756e6420616e60648201527f20616c72656164792070656e64696e672070726f706f73616c00000000000000608482015260a40161070e565b505b6000610b6943600a6000876002811115610b4f57610b4f6138b0565b60ff16815260200190815260200160002060000154612b9d565b90506000610ba182600a6000886002811115610b8757610b876138b0565b60ff16815260200190815260200160002060010154612b9d565b600180549192506000610bb383613b83565b909155505060018054600081815260046020908152604080832093845592840180546001600160a01b031916331790558354825282822060020182905592548152208b51610c09926003909201918d01906130aa565b5060015460009081526004602081815260409092208b51610c32939190920191908c019061310f565b5060015460009081526004602090815260409091208951610c5b926005909201918b019061314a565b5060015460009081526004602090815260409091208851610c84926006909201918a019061319c565b5060018054600090815260046020526040808220600701859055825482528082206008018490558254825280822060090182905582548252808220600a0182905582548252808220600b0182905582548252808220600c908101805460ff1916905592548252902001805461ff0019169055846002811115610d0857610d086138b0565b600180546000908152600460209081526040808320600e01805460ff191660ff96909616959095179094558254808352848320909301546001600160a01b0316825260059052919091208190557fc8df7ff219f3c0358e14500814d8b62b443a4bebf3a596baa60b9295b1cf1bde90338c8c8c8c88888e8e6002811115610d9157610d916138b0565b604051610da79a99989796959493929190613b9c565b60405180910390a1505060015498975050505050505050565b6008546001600160a01b03163314610e375760405162461bcd60e51b815260206004820152603460248201527f476f7665726e6f72427261766f3a3a5f73657450726f706f73616c4d61784f7060448201527365726174696f6e733a206f776e6572206f6e6c7960601b606482015260840161070e565b600680549082905560408051828152602081018490527fd03b3c3c5c1446bcdd31423061041c94ca3bc5450fe7ccfb0f636f4c420de87e91015b60405180910390a15050565b60608060608060006004600087815260200190815260200160002090508060030181600401826005018360060183805480602002602001604051908101604052809291908181526020018280548015610eff57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ee1575b5050505050935082805480602002602001604051908101604052809291908181526020018280548015610f5157602002820191906000526020600020905b815481526020019060010190808311610f3d575b5050505050925081805480602002602001604051908101604052809291908181526020016000905b82821015611025578382906000526020600020018054610f9890613c40565b80601f0160208091040260200160405190810160405280929190818152602001828054610fc490613c40565b80156110115780601f10610fe657610100808354040283529160200191611011565b820191906000526020600020905b815481529060010190602001808311610ff457829003601f168201915b505050505081526020019060010190610f79565b50505050915080805480602002602001604051908101604052809291908181526020016000905b828210156110f857838290600052602060002001805461106b90613c40565b80601f016020809104026020016040519081016040528092919081815260200182805461109790613c40565b80156110e45780601f106110b9576101008083540402835291602001916110e4565b820191906000526020600020905b8154815290600101906020018083116110c757829003601f168201915b50505050508152602001906001019061104c565b5050505090509450945094509450509193509193565b6040805180820182526016815275456e636c61627320476f7665726e6f7220427261766f60501b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527fc05d8de58100958f8c2b79b9de5de75fb0cd927d9820f124296651b356f16b1c81840152466060820152306080808301919091528351808303909101815260a0820184528051908301207f150214d74d59b7d1e90c73fc22ef3d991dd0a76b046543d4d80ab92d2a50328f60c083015260e0820189905260ff8816610100808401919091528451808403909101815261012083019094528351939092019290922061190160f01b6101408401526101428301829052610162830181905290916000906101820160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015611294573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661130f5760405162461bcd60e51b815260206004820152602f60248201527f476f7665726e6f72427261766f3a3a63617374566f746542795369673a20696e60448201526e76616c6964207369676e617475726560881b606482015260840161070e565b806001600160a01b03167fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48a8a611347858e8e612bf0565b6040805193845260ff90921660208401526001600160601b03169082015260806060820181905260009082015260a00160405180910390a2505050505050505050565b6000816001541015801561139f575060005482115b6113fd5760405162461bcd60e51b815260206004820152602960248201527f476f7665726e6f72427261766f3a3a73746174653a20696e76616c69642070726044820152681bdc1bdcd85b081a5960ba1b606482015260840161070e565b6000828152600460205260409020600c81015460ff16156114215750600292915050565b806007015443116114355750600092915050565b806008015443116114495750600192915050565b80600a0154816009015411158061146d5750697f0e10af47c1c70000008160090154105b1561147b5750600392915050565b80600201546000036114905750600492915050565b600c810154610100900460ff16156114ab5750600792915050565b6002810154600e82015460ff166000908152600b60209081526040918290205482516360d143f160e11b8152925161153994936001600160a01b039092169263c1a287e292600480820193918290030181865afa158015611510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115349190613c74565b612b9d565b42106115485750600692915050565b50600592915050565b50919050565b60076115628261138a565b6007811115611573576115736138b0565b036115df5760405162461bcd60e51b815260206004820152603660248201527f476f7665726e6f72427261766f3a3a63616e63656c3a2063616e6e6f742063616044820152751b98d95b08195e1958dd5d1959081c1c9bdc1bdcd85b60521b606482015260840161070e565b60008181526004602052604090206007546001600160a01b0316331480611612575060018101546001600160a01b031633145b806116d35750600e81015460ff166000908152600a60205260409020600201546003546001808401546001600160a01b039283169263782d6fe19291169061165b904390612b42565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381865afa1580156116a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c89190613b44565b6001600160601b0316105b6117375760405162461bcd60e51b815260206004820152602f60248201527f476f7665726e6f72427261766f3a3a63616e63656c3a2070726f706f7365722060448201526e18589bdd99481d1a1c995cda1bdb19608a1b606482015260840161070e565b600c8101805460ff1916600117905560005b600382015481101561186f57600e82015460ff166000908152600b60205260409020546003830180546001600160a01b039092169163591fcdfe91908490811061179557611795613c8d565b6000918252602090912001546004850180546001600160a01b0390921691859081106117c3576117c3613c8d565b90600052602060002001548560050185815481106117e3576117e3613c8d565b9060005260206000200186600601868154811061180257611802613c8d565b9060005260206000200187600201546040518663ffffffff1660e01b8152600401611831959493929190613d20565b600060405180830381600087803b15801561184b57600080fd5b505af115801561185f573d6000803e3d6000fd5b5050600190920191506117499050565b506040518281527f789cf55be980739dad1d0699b93b58e806b51c9d96619bfa8fe0a28abaa7b30c90602001610e71565b337fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda483836118cf848383612bf0565b6040805193845260ff90921660208401526001600160601b03169082015260806060820181905260009082015260a00160405180910390a25050565b6008546001600160a01b031633146119785760405162461bcd60e51b815260206004820152602a60248201527f476f7665726e6f72427261766f3a5f73657450656e64696e674f776e65723a206044820152696f776e6572206f6e6c7960b01b606482015260840161070e565b600980546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b9101610e71565b337fb8e138887d0aa13bab447e82de9d5c1777041ecd21ca36ba824ff1e6c07ddda48585611a01848383612bf0565b8686604051611a14959493929190613d6c565b60405180910390a250505050565b60008052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76546001600160a01b031615611abe5760405162461bcd60e51b815260206004820152603260248201527f476f7665726e6f72427261766f3a3a696e697469616c697a653a2063616e6e6f6044820152717420696e697469616c697a6520747769636560701b606482015260840161070e565b6001600160a01b038416611b195760405162461bcd60e51b815260206004820152602e6024820152600080516020613fdb83398151915260448201526d69642065636c206164647265737360901b606482015260840161070e565b6001600160a01b038116611b715760405162461bcd60e51b815260206004820152602b6024820152600080516020613fdb83398151915260448201526a34b21033bab0b93234b0b760a91b606482015260840161070e565b611b7d60026001613dbc565b60ff16825114611c145760405162461bcd60e51b815260206004820152605660248201527f476f7665726e6f72427261766f3a3a696e697469616c697a653a6e756d62657260448201527f206f662074696d656c6f636b732073686f756c64206d61746368206e756d626560648201527572206f6620676f7665726e616e636520726f7574657360501b608482015260a40161070e565b611c2060026001613dbc565b60ff16835114611cbe5760405162461bcd60e51b815260206004820152605d60248201527f476f7665726e6f72427261766f3a3a696e697469616c697a653a6e756d62657260448201527f206f662070726f706f73616c20636f6e666967732073686f756c64206d61746360648201527f68206e756d626572206f6620676f7665726e616e636520726f75746573000000608482015260a40161070e565b60088054336001600160a01b0319918216179091556003805482166001600160a01b0387811691909117909155600a60065560078054909216908316179055825160005b8181101561213357610e10858281518110611d1f57611d1f613c8d565b6020026020010151602001511015611d845760405162461bcd60e51b81526020600482015260346024820152600080516020613fdb8339815191526044820152731a59081b5a5b881d9bdd1a5b99c81c195c9a5bd960621b606482015260840161070e565b62062700858281518110611d9a57611d9a613c8d565b6020026020010151602001511115611dff5760405162461bcd60e51b81526020600482015260346024820152600080516020613fdb8339815191526044820152731a59081b585e081d9bdd1a5b99c81c195c9a5bd960621b606482015260840161070e565b6001858281518110611e1357611e13613c8d565b6020026020010151600001511015611e775760405162461bcd60e51b81526020600482015260336024820152600080516020613fdb8339815191526044820152726964206d696e20766f74696e672064656c617960681b606482015260840161070e565b62031380858281518110611e8d57611e8d613c8d565b6020026020010151600001511115611ef15760405162461bcd60e51b81526020600482015260336024820152600080516020613fdb8339815191526044820152726964206d617820766f74696e672064656c617960681b606482015260840161070e565b691fc3842bd1f071c00000858281518110611f0e57611f0e613c8d565b6020026020010151604001511015611f7c5760405162461bcd60e51b81526020600482015260396024820152600080516020613fdb83398151915260448201527f6964206d696e2070726f706f73616c207468726573686f6c6400000000000000606482015260840161070e565b693f870857a3e0e3800000858281518110611f9957611f99613c8d565b60200260200101516040015111156120075760405162461bcd60e51b81526020600482015260396024820152600080516020613fdb83398151915260448201527f6964206d61782070726f706f73616c207468726573686f6c6400000000000000606482015260840161070e565b60006001600160a01b031684828151811061202457612024613c8d565b60200260200101516001600160a01b03160361209d5760405162461bcd60e51b815260206004820152603260248201527f476f7665726e6f72427261766f3a3a696e697469616c697a653a696e76616c69604482015271642074696d656c6f636b206164647265737360701b606482015260840161070e565b8481815181106120af576120af613c8d565b6020908102919091018101516000838152600a835260409081902082518155928201516001840155015160029091015583518490829081106120f3576120f3613c8d565b6020908102919091018101516000838152600b909252604090912080546001600160a01b0319166001600160a01b03909216919091179055600101611d02565b505050505050565b60046121468261138a565b6007811115612157576121576138b0565b146121d85760405162461bcd60e51b8152602060048201526044602482018190527f476f7665726e6f72427261766f3a3a71756575653a2070726f706f73616c2063908201527f616e206f6e6c79206265207175657565642069662069742069732073756363656064820152631959195960e21b608482015260a40161070e565b6000818152600460208181526040808420600e81015460ff168552600b8352818520548251630d48571f60e31b815292519195946122429442946001600160a01b0390931693636a42b8f89380840193908290030181865afa158015611510573d6000803e3d6000fd5b905060005b600383015481101561240b5761240383600301828154811061226b5761226b613c8d565b6000918252602090912001546004850180546001600160a01b03909216918490811061229957612299613c8d565b90600052602060002001548560050184815481106122b9576122b9613c8d565b9060005260206000200180546122ce90613c40565b80601f01602080910402602001604051908101604052809291908181526020018280546122fa90613c40565b80156123475780601f1061231c57610100808354040283529160200191612347565b820191906000526020600020905b81548152906001019060200180831161232a57829003601f168201915b505050505086600601858154811061236157612361613c8d565b90600052602060002001805461237690613c40565b80601f01602080910402602001604051908101604052809291908181526020018280546123a290613c40565b80156123ef5780601f106123c4576101008083540402835291602001916123ef565b820191906000526020600020905b8154815290600101906020018083116123d257829003601f168201915b50505050600e89015488915060ff16612ed0565b600101612247565b506002820181905560408051848152602081018390527f9a2e42fd6722813d69113e7d0079d3d940171428df7373df9c7f7617cfda2892910160405180910390a1505050565b604080516060808201835260008083526020808401829052928401819052858152600483528381206001600160a01b0386168252600d018352839020835191820184525460ff8082161515835261010082041692820192909252620100009091046001600160601b0316918101919091525b92915050565b6007546001600160a01b03163314806124ec57506008546001600160a01b031633145b6125545760405162461bcd60e51b815260206004820152603360248201527f476f7665726e6f72427261766f3a3a5f736574477561726469616e3a206f776e6044820152726572206f7220677561726469616e206f6e6c7960681b606482015260840161070e565b6001600160a01b0381166125d05760405162461bcd60e51b815260206004820152603b60248201527f476f7665726e6f72427261766f3a3a5f736574477561726469616e3a2063616e60448201527f6e6f74206c69766520776974686f7574206120677561726469616e0000000000606482015260840161070e565b600780546001600160a01b038381166001600160a01b031983168117909355604080519190921680825260208201939093527f08fdaf06427a2010e5958f4329b566993472d14ce81d3f16ce7f2a2660da98e39101610e71565b6008546001600160a01b031633146126905760405162461bcd60e51b8152602060048201526024808201527f476f7665726e6f72427261766f3a3a5f696e6974696174653a206f776e6572206044820152636f6e6c7960e01b606482015260840161070e565b600054156126f95760405162461bcd60e51b815260206004820152603060248201527f476f7665726e6f72427261766f3a3a5f696e6974696174653a2063616e206f6e60448201526f6c7920696e697469617465206f6e636560801b606482015260840161070e565b806001600160a01b031663da35c6646040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061275d9190613c74565b600181905560009081555b61277460026001613dbc565b60ff168110156127ed576000818152600b602052604080822054815163ebbc496560e01b815291516001600160a01b039091169263ebbc4965926004808201939182900301818387803b1580156127ca57600080fd5b505af11580156127de573d6000803e3d6000fd5b50505050806001019050612768565b5050565b6009546001600160a01b03163314801561280a57503315155b61286d5760405162461bcd60e51b815260206004820152602e60248201527f476f7665726e6f72427261766f3a5f6163636570744f776e65723a2070656e6460448201526d696e67206f776e6572206f6e6c7960901b606482015260840161070e565b60088054600980546001600160a01b038082166001600160a01b031980861682179096559490911690915560408051919092168082526020820184905292917f70aea8d848e8a90fb7661b227dc522eb6395c3dac71b63cb59edd5c9899b2364910160405180910390a1600954604080516001600160a01b03808516825290921660208301527fb3d55174552271a4f1aaf36b72f50381e892171636b3fb5447fe00e995e7a37b9101610e71565b60056129268261138a565b6007811115612937576129376138b0565b146129b85760405162461bcd60e51b815260206004820152604560248201527f476f7665726e6f72427261766f3a3a657865637574653a2070726f706f73616c60448201527f2063616e206f6e6c7920626520657865637574656420696620697420697320716064820152641d595d595960da1b608482015260a40161070e565b6000818152600460205260408120600c8101805461ff001916610100179055905b6003820154811015612b1157600e82015460ff166000908152600b60205260409020546003830180546001600160a01b0390921691630825f38f919084908110612a2557612a25613c8d565b6000918252602090912001546004850180546001600160a01b039092169185908110612a5357612a53613c8d565b9060005260206000200154856005018581548110612a7357612a73613c8d565b90600052602060002001866006018681548110612a9257612a92613c8d565b9060005260206000200187600201546040518663ffffffff1660e01b8152600401612ac1959493929190613d20565b6000604051808303816000875af1158015612ae0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612b089190810190613dd5565b506001016129d9565b506040518281527f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f90602001610e71565b600082821115612b8c5760405162461bcd60e51b81526020600482015260156024820152747375627472616374696f6e20756e646572666c6f7760581b604482015260640161070e565b612b968284613e4c565b9392505050565b600080612baa8385613e5f565b905083811015612b965760405162461bcd60e51b81526020600482015260116024820152706164646974696f6e206f766572666c6f7760781b604482015260640161070e565b60006001612bfd8461138a565b6007811115612c0e57612c0e6138b0565b14612c755760405162461bcd60e51b815260206004820152603160248201527f476f7665726e6f72427261766f3a3a63617374566f7465496e7465726e616c3a604482015270081d9bdd1a5b99c81a5cc818db1bdcd959607a1b606482015260840161070e565b60028260ff161115612ce45760405162461bcd60e51b815260206004820152603260248201527f476f7665726e6f72427261766f3a3a63617374566f7465496e7465726e616c3a60448201527120696e76616c696420766f7465207479706560701b606482015260840161070e565b60008381526004602090815260408083206001600160a01b0388168452600d8101909252909120805460ff1615612d7a5760405162461bcd60e51b815260206004820152603460248201527f476f7665726e6f72427261766f3a3a63617374566f7465496e7465726e616c3a604482015273081d9bdd195c88185b1c9958591e481d9bdd195960621b606482015260840161070e565b600354600783015460405163782d6fe160e01b81526000926001600160a01b03169163782d6fe191612dc4918b916004016001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015612de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e059190613b44565b90508460ff16600003612e3357612e2983600a0154826001600160601b0316612b9d565b600a840155612e87565b8460ff16600103612e5f57612e558360090154826001600160601b0316612b9d565b6009840155612e87565b8460ff16600203612e8757612e8183600b0154826001600160601b0316612b9d565b600b8401555b81546001600160601b03821662010000026dffffffffffffffffffffffff00001960ff88166101000261ffff199093169290921760011791909116179091559150509392505050565b60ff81166000908152600b60209081526040918290205491516001600160a01b039092169163f2b0653791612f0f918a918a918a918a918a9101613e72565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b8152600401612f4391815260200190565b602060405180830381865afa158015612f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f849190613eab565b156130155760405162461bcd60e51b815260206004820152605560248201527f476f7665726e6f72427261766f3a3a71756575654f72526576657274496e746560448201527f726e616c3a206964656e746963616c2070726f706f73616c20616374696f6e20606482015274616c7265616479207175657565642061742065746160581b608482015260a40161070e565b60ff81166000908152600b602052604090819020549051633a66f90160e01b81526001600160a01b0390911690633a66f9019061305e9089908990899089908990600401613e72565b6020604051808303816000875af115801561307d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130a19190613c74565b50505050505050565b8280548282559060005260206000209081019282156130ff579160200282015b828111156130ff57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906130ca565b5061310b9291506131ee565b5090565b8280548282559060005260206000209081019282156130ff579160200282015b828111156130ff57825182559160200191906001019061312f565b828054828255906000526020600020908101928215613190579160200282015b8281111561319057825182906131809082613f1a565b509160200191906001019061316a565b5061310b929150613203565b8280548282559060005260206000209081019282156131e2579160200282015b828111156131e257825182906131d29082613f1a565b50916020019190600101906131bc565b5061310b929150613220565b5b8082111561310b57600081556001016131ef565b8082111561310b576000613217828261323d565b50600101613203565b8082111561310b576000613234828261323d565b50600101613220565b50805461324990613c40565b6000825580601f10613259575050565b601f01602090049060005260206000209081019061327791906131ee565b50565b60006020828403121561328c57600080fd5b5035919050565b60005b838110156132ae578181015183820152602001613296565b50506000910152565b600081518084526132cf816020860160208601613293565b601f01601f19169290920160200192915050565b602081526000612b9660208301846132b7565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff8111828210171561332f5761332f6132f6565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561335e5761335e6132f6565b604052919050565b600067ffffffffffffffff821115613380576133806132f6565b5060051b60200190565b6001600160a01b038116811461327757600080fd5b80356133aa8161338a565b919050565b600082601f8301126133c057600080fd5b813560206133d56133d083613366565b613335565b8083825260208201915060208460051b8701019350868411156133f757600080fd5b602086015b8481101561341c57803561340f8161338a565b83529183019183016133fc565b509695505050505050565b600082601f83011261343857600080fd5b813560206134486133d083613366565b8083825260208201915060208460051b87010193508684111561346a57600080fd5b602086015b8481101561341c578035835291830191830161346f565b600067ffffffffffffffff8211156134a0576134a06132f6565b50601f01601f191660200190565b60006134bc6133d084613486565b90508281528383830111156134d057600080fd5b828260208301376000602084830101529392505050565b600082601f8301126134f857600080fd5b612b96838335602085016134ae565b600082601f83011261351857600080fd5b813560206135286133d083613366565b82815260059290921b8401810191818101908684111561354757600080fd5b8286015b8481101561341c57803567ffffffffffffffff81111561356b5760008081fd5b6135798986838b01016134e7565b84525091830191830161354b565b600082601f83011261359857600080fd5b813560206135a86133d083613366565b82815260059290921b840181019181810190868411156135c757600080fd5b8286015b8481101561341c57803567ffffffffffffffff8111156135eb5760008081fd5b8701603f810189136135fd5760008081fd5b61360e8986830135604084016134ae565b8452509183019183016135cb565b8035600381106133aa57600080fd5b60008060008060008060c0878903121561364457600080fd5b863567ffffffffffffffff8082111561365c57600080fd5b6136688a838b016133af565b9750602089013591508082111561367e57600080fd5b61368a8a838b01613427565b965060408901359150808211156136a057600080fd5b6136ac8a838b01613507565b955060608901359150808211156136c257600080fd5b6136ce8a838b01613587565b945060808901359150808211156136e457600080fd5b506136f189828a016134e7565b92505061370060a0880161361c565b90509295509295509295565b60006020828403121561371e57600080fd5b8135612b968161338a565b60008151808452602080850194506020840160005b838110156137635781516001600160a01b03168752958201959082019060010161373e565b509495945050505050565b60008151808452602080850194506020840160005b8381101561376357815187529582019590820190600101613783565b60008282518085526020808601955060208260051b8401016020860160005b848110156137ec57601f198684030189526137da8383516132b7565b988401989250908301906001016137be565b5090979650505050505050565b60808152600061380c6080830187613729565b828103602084015261381e818761376e565b90508281036040840152613832818661379f565b90508281036060840152613846818561379f565b979650505050505050565b803560ff811681146133aa57600080fd5b600080600080600060a0868803121561387a57600080fd5b8535945061388a60208701613851565b935061389860408701613851565b94979396509394606081013594506080013592915050565b634e487b7160e01b600052602160045260246000fd5b60208101600883106138e857634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561390157600080fd5b8235915061391160208401613851565b90509250929050565b6000806000806060858703121561393057600080fd5b8435935061394060208601613851565b9250604085013567ffffffffffffffff8082111561395d57600080fd5b818701915087601f83011261397157600080fd5b81358181111561398057600080fd5b88602082850101111561399257600080fd5b95989497505060200194505050565b600082601f8301126139b257600080fd5b813560206139c26133d083613366565b8083825260208201915060208460051b8701019350868411156139e457600080fd5b602086015b8481101561341c5780356139fc8161338a565b83529183019183016139e9565b60008060008060808587031215613a1f57600080fd5b8435613a2a8161338a565b935060208581013567ffffffffffffffff80821115613a4857600080fd5b818801915088601f830112613a5c57600080fd5b8135613a6a6133d082613366565b8181526060918202840185019185820191908c841115613a8957600080fd5b948601945b83861015613ad35780868e031215613aa65760008081fd5b613aae61330c565b8635815287870135888201526040808801359082015283529485019491860191613a8e565b50975050506040880135925080831115613aec57600080fd5b5050613afa878288016139a1565b925050613b096060860161339f565b905092959194509250565b60008060408385031215613b2757600080fd5b823591506020830135613b398161338a565b809150509250929050565b600060208284031215613b5657600080fd5b81516001600160601b0381168114612b9657600080fd5b634e487b7160e01b600052601160045260246000fd5b600060018201613b9557613b95613b6d565b5060010190565b8a81526001600160a01b038a16602082015261014060408201819052600090613bc78382018c613729565b90508281036060840152613bdb818b61376e565b90508281036080840152613bef818a61379f565b905082810360a0840152613c03818961379f565b90508660c08401528560e0840152828103610100840152613c2481866132b7565b91505060ff83166101208301529b9a5050505050505050505050565b600181811c90821680613c5457607f821691505b60208210810361155157634e487b7160e01b600052602260045260246000fd5b600060208284031215613c8657600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008154613cb081613c40565b808552602060018381168015613ccd5760018114613ce757613d15565b60ff1985168884015283151560051b880183019550613d15565b866000528260002060005b85811015613d0d5781548a8201860152908301908401613cf2565b890184019650505b505050505092915050565b60018060a01b038616815284602082015260a060408201526000613d4760a0830186613ca3565b8281036060840152613d598186613ca3565b9150508260808301529695505050505050565b85815260ff851660208201526001600160601b038416604082015260806060820152816080820152818360a0830137600081830160a090810191909152601f909201601f19160101949350505050565b60ff81811683821601908111156124c3576124c3613b6d565b600060208284031215613de757600080fd5b815167ffffffffffffffff811115613dfe57600080fd5b8201601f81018413613e0f57600080fd5b8051613e1d6133d082613486565b818152856020838501011115613e3257600080fd5b613e43826020830160208601613293565b95945050505050565b818103818111156124c3576124c3613b6d565b808201808211156124c3576124c3613b6d565b60018060a01b038616815284602082015260a060408201526000613e9960a08301866132b7565b8281036060840152613d5981866132b7565b600060208284031215613ebd57600080fd5b81518015158114612b9657600080fd5b601f821115613f15576000816000526020600020601f850160051c81016020861015613ef65750805b601f850160051c820191505b8181101561213357828155600101613f02565b505050565b815167ffffffffffffffff811115613f3457613f346132f6565b613f4881613f428454613c40565b84613ecd565b602080601f831160018114613f7d5760008415613f655750858301515b600019600386901b1c1916600185901b178555612133565b600085815260208120601f198616915b82811015613fac57888601518255948401946001909101908401613f8d565b5085821015613fca5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe476f7665726e6f72427261766f3a3a696e697469616c697a653a20696e76616ca2646970667358221220b60676e985c631a48ce977c94957d82bde67cdf347918372aa533c82b13b927164736f6c63430008190033",
  "devdoc": {
    "events": {
      "VoteCast(address,uint256,uint8,uint256,string)": {
        "params": {
          "proposalId": "The proposal id which was voted on",
          "reason": "The reason given for the vote by the voter",
          "support": "Support value for the vote. 0=against, 1=for, 2=abstain",
          "voter": "The address which casted a vote",
          "votes": "Number of votes which were cast by the voter"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "_acceptOwner()": {
        "details": "Owner function for pending owner to accept role and update owner"
      },
      "_initiate(address)": {
        "details": "Owner only. Sets initial proposal id which initiates the contract, ensuring a continuous proposal id count",
        "params": {
          "governorAlpha": "The address for the Governor to continue the proposal id count from"
        }
      },
      "_setGuardian(address)": {
        "params": {
          "newGuardian": "the address of the new guardian"
        }
      },
      "_setPendingOwner(address)": {
        "details": "Owner function to begin change of owner. The newPendingOwner must call `_acceptOwner` to finalize the transfer.",
        "params": {
          "newPendingOwner": "New pending owner."
        }
      },
      "_setProposalMaxOperations(uint256)": {
        "details": "Owner only.",
        "params": {
          "proposalMaxOperations_": "Max proposal operations"
        }
      },
      "cancel(uint256)": {
        "params": {
          "proposalId": "The id of the proposal to cancel"
        }
      },
      "castVote(uint256,uint8)": {
        "params": {
          "proposalId": "The id of the proposal to vote on",
          "support": "The support value for the vote. 0=against, 1=for, 2=abstain"
        }
      },
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
        "details": "External function that accepts EIP-712 signatures for voting on proposals.",
        "params": {
          "proposalId": "The id of the proposal to vote on",
          "r": "part of the ECDSA sig output",
          "s": "part of the ECDSA sig output",
          "support": "The support value for the vote. 0=against, 1=for, 2=abstain",
          "v": "recovery id of ECDSA signature"
        }
      },
      "castVoteWithReason(uint256,uint8,string)": {
        "params": {
          "proposalId": "The id of the proposal to vote on",
          "reason": "The reason given for the vote by the voter",
          "support": "The support value for the vote. 0=against, 1=for, 2=abstain"
        }
      },
      "execute(uint256)": {
        "params": {
          "proposalId": "The id of the proposal to execute"
        }
      },
      "getActions(uint256)": {
        "params": {
          "proposalId": "the id of the proposal "
        }
      },
      "getReceipt(uint256,address)": {
        "params": {
          "proposalId": "the id of proposal",
          "voter": "The address of the voter"
        },
        "returns": {
          "_0": "address "
        }
      },
      "initialize(address,(uint256,uint256,uint256)[],address[],address)": {
        "params": {
          "eclVault_": "The address of the EclVault",
          "proposalConfigs_": "Governance configs for each governance route",
          "timelocks": "Timelock addresses for each governance route"
        }
      },
      "propose(address[],uint256[],string[],bytes[],string,uint8)": {
        "details": "NOTE: Proposals with duplicate set of actions can not be queued for execution. If the proposals consists  of duplicate actions, it's recommended to split those actions into separate proposals",
        "params": {
          "calldatas": "Calldatas for proposal calls",
          "description": "String description of the proposal",
          "proposalType": "the type of the proposal (e.g NORMAL, FASTTRACK, CRITICAL)",
          "signatures": "Function signatures for proposal calls",
          "targets": "Target addresses for proposal calls",
          "values": "BNB values for proposal calls"
        },
        "returns": {
          "_0": "Proposal id of new proposal"
        }
      },
      "queue(uint256)": {
        "params": {
          "proposalId": "The id of the proposal to queue"
        }
      },
      "state(uint256)": {
        "params": {
          "proposalId": "The id of the proposal"
        },
        "returns": {
          "_0": "ProposalState"
        }
      }
    },
    "title": "GovernorBravoDelegate",
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewGuardian(address,address)": {
        "notice": "Emitted when the new guardian address is set"
      },
      "NewImplementation(address,address)": {
        "notice": "Emitted when implementation is changed"
      },
      "NewOwner(address,address)": {
        "notice": "Emitted when pendingOwner is accepted, which means owner is updated"
      },
      "NewPendingOwner(address,address)": {
        "notice": "Emitted when pendingOwner is changed"
      },
      "ProposalCanceled(uint256)": {
        "notice": "An event emitted when a proposal has been canceled"
      },
      "ProposalCreated(uint256,address,address[],uint256[],string[],bytes[],uint256,uint256,string,uint8)": {
        "notice": "An event emitted when a new proposal is created"
      },
      "ProposalExecuted(uint256)": {
        "notice": "An event emitted when a proposal has been executed in the Timelock"
      },
      "ProposalMaxOperationsUpdated(uint256,uint256)": {
        "notice": "Emitted when the maximum number of operations in one proposal is updated"
      },
      "ProposalQueued(uint256,uint256)": {
        "notice": "An event emitted when a proposal has been queued in the Timelock"
      },
      "ProposalThresholdSet(uint256,uint256)": {
        "notice": "Emitted when proposal threshold is set"
      },
      "VoteCast(address,uint256,uint8,uint256,string)": {
        "notice": "An event emitted when a vote has been cast on a proposal"
      },
      "VotingDelaySet(uint256,uint256)": {
        "notice": "An event emitted when the voting delay is set"
      },
      "VotingPeriodSet(uint256,uint256)": {
        "notice": "An event emitted when the voting period is set"
      }
    },
    "kind": "user",
    "methods": {
      "BALLOT_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the ballot struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "MAX_PROPOSAL_THRESHOLD()": {
        "notice": "The maximum setable proposal threshold"
      },
      "MAX_VOTING_DELAY()": {
        "notice": "The max setable voting delay"
      },
      "MAX_VOTING_PERIOD()": {
        "notice": "The max setable voting period"
      },
      "MIN_PROPOSAL_THRESHOLD()": {
        "notice": "The minimum setable proposal threshold"
      },
      "MIN_VOTING_DELAY()": {
        "notice": "The min setable voting delay"
      },
      "MIN_VOTING_PERIOD()": {
        "notice": "The minimum setable voting period"
      },
      "_acceptOwner()": {
        "notice": "Accepts transfer of owner rights. msg.sender must be pendingOwner"
      },
      "_initiate(address)": {
        "notice": "Initiate the GovernorBravo contract"
      },
      "_setGuardian(address)": {
        "notice": "Sets the new governance guardian"
      },
      "_setPendingOwner(address)": {
        "notice": "Begins transfer of owner rights. The newPendingOwner must call `_acceptOwner` to finalize the transfer."
      },
      "_setProposalMaxOperations(uint256)": {
        "notice": "Set max proposal operations"
      },
      "cancel(uint256)": {
        "notice": "Cancels a proposal only if sender is the proposer, or proposer delegates dropped below proposal threshold"
      },
      "castVote(uint256,uint8)": {
        "notice": "Cast a vote for a proposal"
      },
      "castVoteBySig(uint256,uint8,uint8,bytes32,bytes32)": {
        "notice": "Cast a vote for a proposal by signature"
      },
      "castVoteWithReason(uint256,uint8,string)": {
        "notice": "Cast a vote for a proposal with a reason"
      },
      "eclVault()": {
        "notice": "The address of the Venus governance token"
      },
      "execute(uint256)": {
        "notice": "Executes a queued proposal if eta has passed"
      },
      "getActions(uint256)": {
        "notice": "Gets actions of a proposal"
      },
      "getReceipt(uint256,address)": {
        "notice": "Gets the receipt for a voter on a given proposal"
      },
      "guardian()": {
        "notice": "A privileged role that can cancel any proposal"
      },
      "initialProposalId()": {
        "notice": "Initial proposal id set at become"
      },
      "initialize(address,(uint256,uint256,uint256)[],address[],address)": {
        "notice": "Used to initialize the contract during delegator contructor"
      },
      "latestProposalIds(address)": {
        "notice": "The latest proposal for each proposer"
      },
      "name()": {
        "notice": "The name of this contract"
      },
      "owner()": {
        "notice": "Owneristrator for this contract"
      },
      "pendingOwner()": {
        "notice": "Pending owner for this contract"
      },
      "proposalConfigs(uint256)": {
        "notice": "mapping containing configuration for each proposal type"
      },
      "proposalCount()": {
        "notice": "The total number of proposals"
      },
      "proposalMaxOperations()": {
        "notice": "The maximum number of actions that can be included in a proposal"
      },
      "proposalTimelocks(uint256)": {
        "notice": "mapping containing Timelock addresses for each proposal type"
      },
      "proposals(uint256)": {
        "notice": "The official record of all proposals ever proposed"
      },
      "propose(address[],uint256[],string[],bytes[],string,uint8)": {
        "notice": "Function used to propose a new proposal. Sender must have delegates above the proposal threshold. targets, values, signatures, and calldatas must be of equal length"
      },
      "queue(uint256)": {
        "notice": "Queues a proposal of state succeeded"
      },
      "quorumVotes()": {
        "notice": "The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed"
      },
      "state(uint256)": {
        "notice": "Gets the state of a proposal"
      },
      "timelock()": {
        "notice": "The address of the Venus Protocol Timelock"
      }
    },
    "notice": "Venus Governance latest on chain governance includes several new features including variable proposal routes and fine grained pause control. Variable routes for proposals allows for governance paramaters such as voting threshold and timelocks to be customized based on the risk level and impact of the proposal. Added granularity to the pause control mechanism allows governance to pause individual actions on specific markets, which reduces impact on the protocol as a whole. This is particularly useful when applied to isolated pools. The goal of **Governance** is to increase governance efficiency, while mitigating and eliminating malicious or erroneous proposals. ## Details Governance has **3 main contracts**: **GovernanceBravoDelegate, ECLVault, ECL** token. - ECL token is the protocol token used for protocol users to cast their vote on submitted proposals. - ECLVault is the main staking contract for ECL. Users first stake their ECL in the vault and receive voting power proportional to their staked tokens that they can use to vote on proposals. Users also can choose to delegate their voting power to other users. # Governor Bravo `GovernanceBravoDelegate` is main Venus Governance contract. Users interact with it to: - Submit new proposal - Vote on a proposal - Cancel a proposal - Queue a proposal for execution with a timelock executor contract. `GovernanceBravoDelegate` uses the ECLVault to get restrict certain actions based on a user's voting power. The governance rules it inforces are: - A user's voting power must be greater than the `proposalThreshold` to submit a proposal - If a user's voting power drops below certain amount, anyone can cancel the the proposal. The governance guardian and proposal creator can also cancel a proposal at anytime before it is queued for execution. ## Venus Improvement Proposal Venus Governance allows for Venus Improvement Proposals (VIPs) to be categorized based on their impact and risk levels. This allows for optimizing proposals execution to allow for things such as expediting interest rate changes and quickly updating risk parameters, while moving slower on other types of proposals that can prevent a larger risk to the protocol and are not urgent. There are three different types of VIPs with different proposal paramters: - `NORMAL` - `FASTTRACK` - `CRITICAL` When initializing the `GovernorBravo` contract, the parameters for the three routes are set. The parameters are: - `votingDelay`: The delay in blocks between submitting a proposal and when voting begins - `votingPeriod`: The number of blocks where voting will be open - `proposalThreshold`: The number of votes required in order submit a proposal There is also a separate timelock executor contract for each route, which is used to dispatch the VIP for execution, giving even more control over the flow of each type of VIP. ## Voting After a VIP is proposed, voting is opened after the `votingDelay` has passed. For example, if `votingDelay = 0`, then voting will begin in the next block after the proposal has been submitted. After the delay, the proposal state is `ACTIVE` and users can cast their vote `for`, `against`, or `abstain`, weighted by their total voting power (tokens + delegated voting power). Abstaining from a voting allows for a vote to be cast and optionally include a comment, without the incrementing for or against vote count. The total voting power for the user is obtained by calling ECLVault's `getPriorVotes`. `GovernorBravoDelegate` also accepts [EIP-712](https://eips.ethereum.org/EIPS/eip-712) signatures for voting on proposals via the external function `castVoteBySig`. ## Delegating A users voting power includes the amount of staked ECL the have staked as well as the votes delegate to them. Delegating is the process of a user loaning their voting power to another, so that the latter has the combined voting power of both users. This is an important feature because it allows for a user to let another user who they trust propose or vote in their place. The delegation of votes happens through the `ECLVault` contract by calling the `delegate` or `delegateBySig` functions. These same functions can revert vote delegation by calling the same function with a value of `0`.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 880,
        "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
        "label": "initialProposalId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 883,
        "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
        "label": "proposalCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 887,
        "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
        "label": "timelock",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(TimelockInterface)859"
      },
      {
        "astId": 891,
        "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
        "label": "eclVault",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(EclVaultInterface)869"
      },
      {
        "astId": 897,
        "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
        "label": "proposals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(Proposal)958_storage)"
      },
      {
        "astId": 902,
        "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
        "label": "latestProposalIds",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 982,
        "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
        "label": "proposalMaxOperations",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 985,
        "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
        "label": "guardian",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 988,
        "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
        "label": "owner",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 991,
        "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1071,
        "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
        "label": "proposalConfigs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(ProposalConfig)1065_storage)"
      },
      {
        "astId": 1077,
        "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
        "label": "proposalTimelocks",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_contract(TimelockInterface)859)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(EclVaultInterface)869": {
        "encoding": "inplace",
        "label": "contract EclVaultInterface",
        "numberOfBytes": "20"
      },
      "t_contract(TimelockInterface)859": {
        "encoding": "inplace",
        "label": "contract TimelockInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Receipt)969_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GovernorBravoDelegate.Receipt)",
        "numberOfBytes": "32",
        "value": "t_struct(Receipt)969_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_contract(TimelockInterface)859)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => contract TimelockInterface)",
        "numberOfBytes": "32",
        "value": "t_contract(TimelockInterface)859"
      },
      "t_mapping(t_uint256,t_struct(Proposal)958_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernorBravoDelegate.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)958_storage"
      },
      "t_mapping(t_uint256,t_struct(ProposalConfig)1065_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernorBravoDelegate.ProposalConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalConfig)1065_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)958_storage": {
        "encoding": "inplace",
        "label": "struct GovernorBravoDelegate.Proposal",
        "members": [
          {
            "astId": 905,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 908,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 911,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "eta",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 915,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "targets",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 919,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "values",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 923,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "signatures",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 927,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "calldatas",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 930,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "startBlock",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 933,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "endBlock",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 936,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "forVotes",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 939,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "againstVotes",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 942,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 945,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "canceled",
            "offset": 0,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 948,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "executed",
            "offset": 1,
            "slot": "12",
            "type": "t_bool"
          },
          {
            "astId": 954,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "receipts",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_struct(Receipt)969_storage)"
          },
          {
            "astId": 957,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "proposalType",
            "offset": 0,
            "slot": "14",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(ProposalConfig)1065_storage": {
        "encoding": "inplace",
        "label": "struct GovernorBravoDelegate.ProposalConfig",
        "members": [
          {
            "astId": 1058,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "votingDelay",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1061,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "votingPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1064,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "proposalThreshold",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Receipt)969_storage": {
        "encoding": "inplace",
        "label": "struct GovernorBravoDelegate.Receipt",
        "members": [
          {
            "astId": 962,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "hasVoted",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 965,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "support",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 968,
            "contract": "contracts/Governance/GovernorBravoDelegate.sol:GovernorBravoDelegate",
            "label": "votes",
            "offset": 2,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}