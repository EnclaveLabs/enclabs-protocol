{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "contracts/Interfaces/OracleInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.25;\r\n\r\ninterface OracleInterface {\r\n    function getPrice(address asset) external view returns (uint256);\r\n}\r\n\r\ninterface ResilientOracleInterface is OracleInterface {\r\n    function updatePrice(address vToken) external;\r\n\r\n    function updateAssetPrice(address asset) external;\r\n\r\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\r\n}\r\n\r\ninterface TwapInterface is OracleInterface {\r\n    function updateTwap(address asset) external returns (uint256);\r\n}\r\n\r\ninterface BoundValidatorInterface {\r\n    function validatePriceWithAnchorPrice(\r\n        address asset,\r\n        uint256 reporterPrice,\r\n        uint256 anchorPrice\r\n    ) external view returns (bool);\r\n}\r\n"
    },
    "contracts/lib/validators.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\nerror ZeroAddressNotAllowed();\n\n/// @notice Checks if the provided address is nonzero, reverts otherwise\n/// @param address_ Address to check\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\nfunction ensureNonzeroAddress(address address_) pure {\n    if (address_ == address(0)) {\n        revert ZeroAddressNotAllowed();\n    }\n}\n"
    },
    "contracts/Oracle/common/CorrelatedTokenOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { OracleInterface } from \"../../Interfaces/OracleInterface.sol\";\r\nimport { ensureNonzeroAddress } from \"../../lib/validators.sol\";\r\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\n/**\r\n * @title CorrelatedTokenOracle\r\n * @notice This oracle fetches the price of a token that is correlated to another token.\r\n */\r\nabstract contract CorrelatedTokenOracle is OracleInterface {\r\n    /// @notice Address of the correlated token\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    address public immutable CORRELATED_TOKEN;\r\n\r\n    /// @notice Address of the underlying token\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    address public immutable UNDERLYING_TOKEN;\r\n\r\n    /// @notice Address of Resilient Oracle\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    OracleInterface public immutable RESILIENT_ORACLE;\r\n\r\n    /// @notice Thrown if the token address is invalid\r\n    error InvalidTokenAddress();\r\n\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(address correlatedToken, address underlyingToken, address resilientOracle) {\r\n        ensureNonzeroAddress(correlatedToken);\r\n        ensureNonzeroAddress(underlyingToken);\r\n        ensureNonzeroAddress(resilientOracle);\r\n        CORRELATED_TOKEN = correlatedToken;\r\n        UNDERLYING_TOKEN = underlyingToken;\r\n        RESILIENT_ORACLE = OracleInterface(resilientOracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Fetches the price of the correlated token\r\n     * @param asset Address of the correlated token\r\n     * @return price The price of the correlated token in scaled decimal places\r\n     */\r\n    function getPrice(address asset) external view override returns (uint256) {\r\n        if (asset != CORRELATED_TOKEN) revert InvalidTokenAddress();\r\n\r\n        // get underlying token amount for 1 correlated token scaled by underlying token decimals\r\n        uint256 underlyingAmount = _getUnderlyingAmount();\r\n\r\n        // oracle returns (36 - asset decimal) scaled price\r\n        uint256 underlyingUSDPrice = RESILIENT_ORACLE.getPrice(UNDERLYING_TOKEN);\r\n\r\n        IERC20Metadata token = IERC20Metadata(CORRELATED_TOKEN);\r\n        uint256 decimals = token.decimals();\r\n\r\n        // underlyingAmount (for 1 correlated token) * underlyingUSDPrice / decimals(correlated token)\r\n        return (underlyingAmount * underlyingUSDPrice) / (10 ** decimals);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the underlying amount for correlated token\r\n     * @return underlyingAmount Amount of underlying token\r\n     */\r\n    function _getUnderlyingAmount() internal view virtual returns (uint256);\r\n}\r\n"
    },
    "contracts/Oracle/SpectraFixedYieldOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\nimport { ensureNonzeroAddress } from \"../lib/validators.sol\";\r\n\r\n/**\r\n * @title SpectraFixedYieldOracle\r\n * @author Enclabs\r\n * @notice This oracle fetches the price of Spectra PT depending on a fixed initial discount and days left to maturity\r\n */\r\ncontract SpectraFixedYieldOracle is CorrelatedTokenOracle {\r\n    uint256 private constant SECONDS_PER_YEAR = 365 days;\r\n    uint256 private constant ONE = 1e18;\r\n\r\n    address public immutable PT;\r\n    uint256 public immutable maturity;\r\n    uint256 public immutable baseDiscountPerYear; // 100% = 1e18\r\n   \r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address _pt,\r\n        address _underlying,\r\n        address _resilientOracle,\r\n        uint256 _baseDiscountPerYear\r\n        \r\n    ) CorrelatedTokenOracle(_pt, _underlying, _resilientOracle) {\r\n        ensureNonzeroAddress(_pt);\r\n        ensureNonzeroAddress(_underlying);\r\n        require(_baseDiscountPerYear <= 1e18, \"invalid discount\");\r\n        require(_pt != address(0), \"zero address\");\r\n\r\n        PT = _pt;\r\n        maturity = PTMaturity(PT).maturity();\r\n        baseDiscountPerYear = _baseDiscountPerYear;\r\n        \r\n    }\r\n      \r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function getDiscount(\r\n        uint256 timeLeft\r\n    ) public view returns (uint256) {\r\n        return (timeLeft * baseDiscountPerYear) / SECONDS_PER_YEAR;\r\n    }\r\n\r\n       /**\r\n     * @notice Gets the number of underlying for 1 PT at current date\r\n     * @return amount Amount of underlying\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        uint256 timeLeft = (maturity > block.timestamp) ? maturity - block.timestamp : 0;\r\n        uint256 discount = getDiscount(timeLeft);\r\n        require(discount <= ONE, \"discount overflow\");\r\n\r\n        return uint256(ONE - discount);\r\n    }\r\n}\r\n\r\ninterface PTMaturity {\r\n    function maturity() external view returns (uint256);\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": true
      }
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}