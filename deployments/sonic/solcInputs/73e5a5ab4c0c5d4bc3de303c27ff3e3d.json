{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@venusprotocol/solidity-utilities/contracts/constants.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.25;\n\n/// @dev Base unit for computations, usually used in scaling (multiplications, divisions)\nuint256 constant EXP_SCALE = 1e18;\n\n/// @dev A unit (literal one) in EXP_SCALE, usually used in additions/subtractions\nuint256 constant MANTISSA_ONE = EXP_SCALE;\n\n/// @dev The approximate number of seconds per year\nuint256 constant SECONDS_PER_YEAR = 31_536_000;\n"
    },
    "@venusprotocol/solidity-utilities/contracts/validators.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\nerror ZeroAddressNotAllowed();\n\n/// @notice Thrown if the supplied value is 0 where it is not allowed\nerror ZeroValueNotAllowed();\n\n/// @notice Checks if the provided address is nonzero, reverts otherwise\n/// @param address_ Address to check\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\nfunction ensureNonzeroAddress(address address_) pure {\n    if (address_ == address(0)) {\n        revert ZeroAddressNotAllowed();\n    }\n}\n\n/// @notice Checks if the provided value is nonzero, reverts otherwise\n/// @param value_ Value to check\n/// @custom:error ZeroValueNotAllowed is thrown if the provided value is 0\nfunction ensureNonzeroValue(uint256 value_) pure {\n    if (value_ == 0) {\n        revert ZeroValueNotAllowed();\n    }\n}\n"
    },
    "contracts/Interfaces/IAccountant.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\ninterface IAccountant {\r\n    function getRateSafe() external view returns (uint256);\r\n}\r\n"
    },
    "contracts/Interfaces/IEtherFiLiquidityPool.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\ninterface IEtherFiLiquidityPool {\r\n    function amountForShare(uint256 _share) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/Interfaces/IPendlePtOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\ninterface IPendlePtOracle {\r\n    function getPtToAssetRate(address market, uint32 duration) external view returns (uint256);\r\n    function getOracleState(\r\n        address market,\r\n        uint32 duration\r\n    )\r\n        external\r\n        view\r\n        returns (bool increaseCardinalityRequired, uint16 cardinalityRequired, bool oldestObservationSatisfied);\r\n}\r\n"
    },
    "contracts/Interfaces/IPStakePool.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\ninterface IPStakePool {\r\n    struct Data {\r\n        uint256 totalWei;\r\n        uint256 poolTokenSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev The current exchange rate for converting stkBNB to BNB.\r\n     */\r\n    function exchangeRate() external view returns (Data memory);\r\n}\r\n"
    },
    "contracts/Interfaces/ISFrax.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\ninterface ISFrax {\r\n    function convertToAssets(uint256 shares) external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "contracts/Interfaces/IStaderStakeManager.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\ninterface IStaderStakeManager {\r\n    function convertBnbXToBnb(uint256 _amount) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/Interfaces/IStETH.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.25;\r\n\r\ninterface IStETH {\r\n    function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "contracts/Interfaces/ISynclubStakeManager.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\ninterface ISynclubStakeManager {\r\n    function convertSnBnbToBnb(uint256 _amount) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/Interfaces/IWBETH.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\ninterface IWBETH {\r\n    function exchangeRate() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
    },
    "contracts/Interfaces/IwOS.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\ninterface IwOS {\r\n    function convertToAssets(uint256 _share) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/Interfaces/OracleInterface.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity ^0.8.25;\r\n\r\ninterface OracleInterface {\r\n    function getPrice(address asset) external view returns (uint256);\r\n}\r\n\r\ninterface ResilientOracleInterface is OracleInterface {\r\n    function updatePrice(address vToken) external;\r\n\r\n    function updateAssetPrice(address asset) external;\r\n\r\n    function getUnderlyingPrice(address vToken) external view returns (uint256);\r\n}\r\n\r\ninterface TwapInterface is OracleInterface {\r\n    function updateTwap(address asset) external returns (uint256);\r\n}\r\n\r\ninterface BoundValidatorInterface {\r\n    function validatePriceWithAnchorPrice(\r\n        address asset,\r\n        uint256 reporterPrice,\r\n        uint256 anchorPrice\r\n    ) external view returns (bool);\r\n}\r\n"
    },
    "contracts/lib/validators.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity 0.8.25;\n\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\nerror ZeroAddressNotAllowed();\n\n/// @notice Checks if the provided address is nonzero, reverts otherwise\n/// @param address_ Address to check\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\nfunction ensureNonzeroAddress(address address_) pure {\n    if (address_ == address(0)) {\n        revert ZeroAddressNotAllowed();\n    }\n}\n"
    },
    "contracts/Oracle/BNBxOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { IStaderStakeManager } from \"../Interfaces/IStaderStakeManager.sol\";\r\nimport { ensureNonzeroAddress } from \"@venusprotocol/solidity-utilities/contracts/validators.sol\";\r\nimport { EXP_SCALE } from \"@venusprotocol/solidity-utilities/contracts/constants.sol\";\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\n\r\n/**\r\n * @title BNBxOracle\r\n * @author Venus\r\n * @notice This oracle fetches the price of BNBx asset\r\n */\r\ncontract BNBxOracle is CorrelatedTokenOracle {\r\n    /// @notice This is used as token address of BNB on BSC\r\n    address public constant NATIVE_TOKEN_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\r\n\r\n    /// @notice Address of StakeManager\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    IStaderStakeManager public immutable STAKE_MANAGER;\r\n\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address stakeManager,\r\n        address bnbx,\r\n        address resilientOracle\r\n    ) CorrelatedTokenOracle(bnbx, NATIVE_TOKEN_ADDR, resilientOracle) {\r\n        ensureNonzeroAddress(stakeManager);\r\n        STAKE_MANAGER = IStaderStakeManager(stakeManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Fetches the amount of BNB for 1 BNBx\r\n     * @return price The amount of BNB for BNBx\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        return STAKE_MANAGER.convertBnbXToBnb(EXP_SCALE);\r\n    }\r\n}\r\n"
    },
    "contracts/Oracle/common/CorrelatedTokenOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { OracleInterface } from \"../../Interfaces/OracleInterface.sol\";\r\nimport { ensureNonzeroAddress } from \"../../lib/validators.sol\";\r\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\n/**\r\n * @title CorrelatedTokenOracle\r\n * @notice This oracle fetches the price of a token that is correlated to another token.\r\n */\r\nabstract contract CorrelatedTokenOracle is OracleInterface {\r\n    /// @notice Address of the correlated token\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    address public immutable CORRELATED_TOKEN;\r\n\r\n    /// @notice Address of the underlying token\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    address public immutable UNDERLYING_TOKEN;\r\n\r\n    /// @notice Address of Resilient Oracle\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    OracleInterface public immutable RESILIENT_ORACLE;\r\n\r\n    /// @notice Thrown if the token address is invalid\r\n    error InvalidTokenAddress();\r\n\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(address correlatedToken, address underlyingToken, address resilientOracle) {\r\n        ensureNonzeroAddress(correlatedToken);\r\n        ensureNonzeroAddress(underlyingToken);\r\n        ensureNonzeroAddress(resilientOracle);\r\n        CORRELATED_TOKEN = correlatedToken;\r\n        UNDERLYING_TOKEN = underlyingToken;\r\n        RESILIENT_ORACLE = OracleInterface(resilientOracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Fetches the price of the correlated token\r\n     * @param asset Address of the correlated token\r\n     * @return price The price of the correlated token in scaled decimal places\r\n     */\r\n    function getPrice(address asset) external view override returns (uint256) {\r\n        if (asset != CORRELATED_TOKEN) revert InvalidTokenAddress();\r\n\r\n        // get underlying token amount for 1 correlated token scaled by underlying token decimals\r\n        uint256 underlyingAmount = _getUnderlyingAmount();\r\n\r\n        // oracle returns (36 - asset decimal) scaled price\r\n        uint256 underlyingUSDPrice = RESILIENT_ORACLE.getPrice(UNDERLYING_TOKEN);\r\n\r\n        IERC20Metadata token = IERC20Metadata(CORRELATED_TOKEN);\r\n        uint256 decimals = token.decimals();\r\n\r\n        // underlyingAmount (for 1 correlated token) * underlyingUSDPrice / decimals(correlated token)\r\n        return (underlyingAmount * underlyingUSDPrice) / (10 ** decimals * 1e18);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the underlying amount for correlated token\r\n     * @return underlyingAmount Amount of underlying token\r\n     */\r\n    function _getUnderlyingAmount() internal view virtual returns (uint256);\r\n}\r\n"
    },
    "contracts/Oracle/EtherfiAccountantOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\nimport { IAccountant } from \"../Interfaces/IAccountant.sol\";\r\nimport { ensureNonzeroAddress } from \"@venusprotocol/solidity-utilities/contracts/validators.sol\";\r\n\r\n/**\r\n * @title EtherfiAccountantOracle\r\n * @author Venus\r\n * @notice This oracle fetches the price of any Ether.fi asset that uses\r\n * Accountant contracts to derive the underlying price\r\n */\r\ncontract EtherfiAccountantOracle is CorrelatedTokenOracle {\r\n    /// @notice Address of Accountant\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    IAccountant public immutable ACCOUNTANT;\r\n\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address accountant,\r\n        address correlatedToken,\r\n        address underlyingToken,\r\n        address resilientOracle\r\n    ) CorrelatedTokenOracle(correlatedToken, underlyingToken, resilientOracle) {\r\n        ensureNonzeroAddress(accountant);\r\n        ACCOUNTANT = IAccountant(accountant);\r\n    }\r\n\r\n    /**\r\n     * @notice Fetches the conversion rate from the ACCOUNTANT contract\r\n     * @return amount Amount of WBTC\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        return ACCOUNTANT.getRateSafe();\r\n    }\r\n}\r\n"
    },
    "contracts/Oracle/OneJumpOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\nimport { ensureNonzeroAddress } from \"@venusprotocol/solidity-utilities/contracts/validators.sol\";\r\nimport { OracleInterface } from \"../Interfaces/OracleInterface.sol\";\r\nimport { IERC20Metadata } from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\r\n\r\n/**\r\n * @title OneJumpOracle\r\n * @author Venus\r\n * @notice This oracle fetches the price of an asset in through an intermediate asset\r\n */\r\ncontract OneJumpOracle is CorrelatedTokenOracle {\r\n    /// @notice Address of the intermediate oracle\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    OracleInterface public immutable INTERMEDIATE_ORACLE;\r\n\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address correlatedToken,\r\n        address underlyingToken,\r\n        address resilientOracle,\r\n        address intermediateOracle\r\n    ) CorrelatedTokenOracle(correlatedToken, underlyingToken, resilientOracle) {\r\n        ensureNonzeroAddress(intermediateOracle);\r\n        INTERMEDIATE_ORACLE = OracleInterface(intermediateOracle);\r\n    }\r\n\r\n    /**\r\n     * @notice Fetches the amount of the underlying token for 1 correlated token, using the intermediate oracle\r\n     * @return amount The amount of the underlying token for 1 correlated token scaled by the underlying token decimals\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        uint256 underlyingDecimals = IERC20Metadata(UNDERLYING_TOKEN).decimals();\r\n        uint256 correlatedDecimals = IERC20Metadata(CORRELATED_TOKEN).decimals();\r\n\r\n        uint256 underlyingAmount = INTERMEDIATE_ORACLE.getPrice(CORRELATED_TOKEN);\r\n\r\n        return (underlyingAmount * (10 ** correlatedDecimals)) / (10 ** (36 - underlyingDecimals));\r\n    }\r\n}\r\n"
    },
    "contracts/Oracle/PendleOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { IPendlePtOracle } from \"../Interfaces/IPendlePtOracle.sol\";\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\nimport { ensureNonzeroAddress, ensureNonzeroValue } from \"@venusprotocol/solidity-utilities/contracts/validators.sol\";\r\n\r\n/**\r\n * @title PendleOracle\r\n * @author Venus\r\n * @notice This oracle fetches the price of a pendle token\r\n */\r\ncontract PendleOracle is CorrelatedTokenOracle {\r\n    /// @notice Address of the PT oracle\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    IPendlePtOracle public immutable PT_ORACLE;\r\n\r\n    /// @notice Address of the market\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    address public immutable MARKET;\r\n\r\n    /// @notice Twap duration for the oracle\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    uint32 public immutable TWAP_DURATION;\r\n\r\n    /// @notice Thrown if the duration is invalid\r\n    error InvalidDuration();\r\n\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address market,\r\n        address ptOracle,\r\n        address ptToken,\r\n        address underlyingToken,\r\n        address resilientOracle,\r\n        uint32 twapDuration\r\n    ) CorrelatedTokenOracle(ptToken, underlyingToken, resilientOracle) {\r\n        ensureNonzeroAddress(market);\r\n        ensureNonzeroAddress(ptOracle);\r\n        ensureNonzeroValue(twapDuration);\r\n\r\n        MARKET = market;\r\n        PT_ORACLE = IPendlePtOracle(ptOracle);\r\n        TWAP_DURATION = twapDuration;\r\n\r\n        (bool increaseCardinalityRequired, , bool oldestObservationSatisfied) = PT_ORACLE.getOracleState(\r\n            MARKET,\r\n            TWAP_DURATION\r\n        );\r\n        if (increaseCardinalityRequired || !oldestObservationSatisfied) {\r\n            revert InvalidDuration();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Fetches the amount of underlying token for 1 pendle token\r\n     * @return amount The amount of underlying token for pendle token\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        return PT_ORACLE.getPtToAssetRate(MARKET, TWAP_DURATION);\r\n    }\r\n}\r\n"
    },
    "contracts/Oracle/SFraxOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { ISFrax } from \"../Interfaces/ISFrax.sol\";\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\nimport { EXP_SCALE } from \"@venusprotocol/solidity-utilities/contracts/constants.sol\";\r\n\r\n/**\r\n * @title SFraxOracle\r\n * @author Venus\r\n * @notice This oracle fetches the price of sFrax\r\n */\r\ncontract SFraxOracle is CorrelatedTokenOracle {\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address sFrax,\r\n        address frax,\r\n        address resilientOracle\r\n    ) CorrelatedTokenOracle(sFrax, frax, resilientOracle) {}\r\n\r\n    /**\r\n     * @notice Fetches the amount of FRAX for 1 sFrax\r\n     * @return amount The amount of FRAX for sFrax\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        return ISFrax(CORRELATED_TOKEN).convertToAssets(EXP_SCALE);\r\n    }\r\n}\r\n"
    },
    "contracts/Oracle/SlisBNBOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { ISynclubStakeManager } from \"../Interfaces/ISynclubStakeManager.sol\";\r\nimport { ensureNonzeroAddress } from \"@venusprotocol/solidity-utilities/contracts/validators.sol\";\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\nimport { EXP_SCALE } from \"@venusprotocol/solidity-utilities/contracts/constants.sol\";\r\n\r\n/**\r\n * @title SlisBNBOracle\r\n * @author Venus\r\n * @notice This oracle fetches the price of slisBNB asset\r\n */\r\ncontract SlisBNBOracle is CorrelatedTokenOracle {\r\n    /// @notice This is used as token address of BNB on BSC\r\n    address public constant NATIVE_TOKEN_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\r\n\r\n    /// @notice Address of StakeManager\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    ISynclubStakeManager public immutable STAKE_MANAGER;\r\n\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address stakeManager,\r\n        address slisBNB,\r\n        address resilientOracle\r\n    ) CorrelatedTokenOracle(slisBNB, NATIVE_TOKEN_ADDR, resilientOracle) {\r\n        ensureNonzeroAddress(stakeManager);\r\n        STAKE_MANAGER = ISynclubStakeManager(stakeManager);\r\n    }\r\n\r\n    /**\r\n     * @notice Fetches the amount of BNB for 1 slisBNB\r\n     * @return amount The amount of BNB for slisBNB\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        return STAKE_MANAGER.convertSnBnbToBnb(EXP_SCALE);\r\n    }\r\n}\r\n"
    },
    "contracts/Oracle/SpectraFixedYieldOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\nimport { ensureNonzeroAddress } from \"../lib/validators.sol\";\r\n\r\n/**\r\n * @title SpectraFixedYieldOracle\r\n * @author Enclabs\r\n * @notice This oracle fetches the price of Spectra PT depending on a fixed initial discount and days left to maturity\r\n */\r\ncontract SpectraFixedYieldOracle is CorrelatedTokenOracle {\r\n    uint256 private constant SECONDS_PER_YEAR = 365 days;\r\n    uint256 private constant ONE = 1e18;\r\n\r\n    address public immutable PT;\r\n    uint256 public immutable maturity;\r\n    uint256 public immutable baseDiscountPerYear; // 100% = 1e18\r\n   \r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address _pt,\r\n        address _underlying,\r\n        address _resilientOracle,\r\n        uint256 _baseDiscountPerYear\r\n        \r\n    ) CorrelatedTokenOracle(_pt, _underlying, _resilientOracle) {\r\n        ensureNonzeroAddress(_pt);\r\n        ensureNonzeroAddress(_underlying);\r\n        require(_baseDiscountPerYear <= 1e18, \"invalid discount\");\r\n        require(_pt != address(0), \"zero address\");\r\n\r\n        PT = _pt;\r\n        maturity = PTMaturity(PT).maturity();\r\n        baseDiscountPerYear = _baseDiscountPerYear;\r\n        \r\n    }\r\n      \r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function getDiscount(\r\n        uint256 timeLeft\r\n    ) public view returns (uint256) {\r\n        return (timeLeft * baseDiscountPerYear) / SECONDS_PER_YEAR;\r\n    }\r\n\r\n       /**\r\n     * @notice Gets the number of underlying for 1 PT at current date\r\n     * @return amount Amount of underlying\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        uint256 timeLeft = (maturity > block.timestamp) ? maturity - block.timestamp : 0;\r\n        uint256 discount = getDiscount(timeLeft);\r\n        require(discount <= ONE, \"discount overflow\");\r\n\r\n        return uint256(ONE - discount);\r\n    }\r\n}\r\n\r\ninterface PTMaturity {\r\n    function maturity() external view returns (uint256);\r\n}"
    },
    "contracts/Oracle/StkBNBOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { IPStakePool } from \"../Interfaces/IPStakePool.sol\";\r\nimport { ensureNonzeroAddress } from \"@venusprotocol/solidity-utilities/contracts/validators.sol\";\r\nimport { EXP_SCALE } from \"@venusprotocol/solidity-utilities/contracts/constants.sol\";\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\n\r\n/**\r\n * @title StkBNBOracle\r\n * @author Venus\r\n * @notice This oracle fetches the price of stkBNB asset\r\n */\r\ncontract StkBNBOracle is CorrelatedTokenOracle {\r\n    /// @notice This is used as token address of BNB on BSC\r\n    address public constant NATIVE_TOKEN_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\r\n\r\n    /// @notice Address of StakePool\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    IPStakePool public immutable STAKE_POOL;\r\n\r\n    /// @notice Thrown if the pool token supply is zero\r\n    error PoolTokenSupplyIsZero();\r\n\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address stakePool,\r\n        address stkBNB,\r\n        address resilientOracle\r\n    ) CorrelatedTokenOracle(stkBNB, NATIVE_TOKEN_ADDR, resilientOracle) {\r\n        ensureNonzeroAddress(stakePool);\r\n        STAKE_POOL = IPStakePool(stakePool);\r\n    }\r\n\r\n    /**\r\n     * @notice Fetches the amount of BNB for 1 stkBNB\r\n     * @return price The amount of BNB for stkBNB\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        IPStakePool.Data memory exchangeRateData = STAKE_POOL.exchangeRate();\r\n\r\n        if (exchangeRateData.poolTokenSupply == 0) {\r\n            revert PoolTokenSupplyIsZero();\r\n        }\r\n\r\n        return (exchangeRateData.totalWei * EXP_SCALE) / exchangeRateData.poolTokenSupply;\r\n    }\r\n}\r\n"
    },
    "contracts/Oracle/WBETHOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { IWBETH } from \"../Interfaces/IWBETH.sol\";\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\n\r\n/**\r\n * @title WBETHOracle\r\n * @author Venus\r\n * @notice This oracle fetches the price of wBETH asset\r\n */\r\ncontract WBETHOracle is CorrelatedTokenOracle {\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address wbeth,\r\n        address eth,\r\n        address resilientOracle\r\n    ) CorrelatedTokenOracle(wbeth, eth, resilientOracle) {}\r\n\r\n    /**\r\n     * @notice Fetches the amount of ETH for 1 wBETH\r\n     * @return amount The amount of ETH for wBETH\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        return IWBETH(CORRELATED_TOKEN).exchangeRate();\r\n    }\r\n}\r\n"
    },
    "contracts/Oracle/WeETHAccountantOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\nimport { IAccountant } from \"../Interfaces/IAccountant.sol\";\r\nimport { ensureNonzeroAddress } from \"@venusprotocol/solidity-utilities/contracts/validators.sol\";\r\n\r\n/**\r\n * @title WeETHAccountantOracle\r\n * @author Venus\r\n * @notice This oracle fetches the price of Ether.fi tokens based on an `Accountant` contract (i.e. weETHs and weETHk)\r\n */\r\ncontract WeETHAccountantOracle is CorrelatedTokenOracle {\r\n    /// @notice Address of Accountant\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    IAccountant public immutable ACCOUNTANT;\r\n\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address accountant,\r\n        address weethLRT,\r\n        address weth,\r\n        address resilientOracle\r\n    ) CorrelatedTokenOracle(weethLRT, weth, resilientOracle) {\r\n        ensureNonzeroAddress(accountant);\r\n        ACCOUNTANT = IAccountant(accountant);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the WETH for 1 weETH LRT\r\n     * @return amount Amount of WETH\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        return ACCOUNTANT.getRateSafe();\r\n    }\r\n}\r\n"
    },
    "contracts/Oracle/WeETHOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\nimport { IEtherFiLiquidityPool } from \"../Interfaces/IEtherFiLiquidityPool.sol\";\r\nimport { EXP_SCALE } from \"@venusprotocol/solidity-utilities/contracts/constants.sol\";\r\nimport { ensureNonzeroAddress } from \"@venusprotocol/solidity-utilities/contracts/validators.sol\";\r\n\r\n/**\r\n * @title WeETHOracle\r\n * @author Venus\r\n * @notice This oracle fetches the price of weETH\r\n */\r\ncontract WeETHOracle is CorrelatedTokenOracle {\r\n    /// @notice Address of Liqiudity pool\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    IEtherFiLiquidityPool public immutable LIQUIDITY_POOL;\r\n\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address liquidityPool,\r\n        address weETH,\r\n        address eETH,\r\n        address resilientOracle\r\n    ) CorrelatedTokenOracle(weETH, eETH, resilientOracle) {\r\n        ensureNonzeroAddress(liquidityPool);\r\n        LIQUIDITY_POOL = IEtherFiLiquidityPool(liquidityPool);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the eETH for 1 weETH\r\n     * @return amount Amount of eETH\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        return LIQUIDITY_POOL.amountForShare(EXP_SCALE);\r\n    }\r\n}\r\n"
    },
    "contracts/Oracle/WOSOracle.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\nimport { IwOS } from \"../Interfaces/IwOS.sol\";\r\nimport { ensureNonzeroAddress } from \"../lib/validators.sol\";\r\n\r\n/**\r\n * @title WOSOracle\r\n * @author Enclabs\r\n * @notice This oracle fetches the price of wOS. Using 1:1 OS/S\r\n */\r\ncontract WOSOracle is CorrelatedTokenOracle {\r\n    /// @notice Address of wOS contract\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    IwOS public immutable wOS;\r\n\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address _wOS,\r\n        address _wS,\r\n        address _resilientOracle\r\n    ) CorrelatedTokenOracle(_wOS, _wS, _resilientOracle) {\r\n        ensureNonzeroAddress(_wOS);\r\n        ensureNonzeroAddress(_wS);\r\n        wOS = IwOS(_wOS);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the OS for 1 wOS\r\n     * @return amount Amount of eETH\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        return wOS.convertToAssets(1e18);\r\n    }\r\n}\r\n"
    },
    "contracts/Oracle/WstETHOracleV2.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.25;\r\n\r\nimport { IStETH } from \"../Interfaces/IStETH.sol\";\r\nimport { CorrelatedTokenOracle } from \"./common/CorrelatedTokenOracle.sol\";\r\nimport { EXP_SCALE } from \"@venusprotocol/solidity-utilities/contracts/constants.sol\";\r\n\r\n/**\r\n * @title WstETHOracleV2\r\n * @author Venus\r\n * @notice This oracle fetches the price of wstETH\r\n */\r\ncontract WstETHOracleV2 is CorrelatedTokenOracle {\r\n    /// @notice Constructor for the implementation contract.\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(\r\n        address wstETH,\r\n        address stETH,\r\n        address resilientOracle\r\n    ) CorrelatedTokenOracle(wstETH, stETH, resilientOracle) {}\r\n\r\n    /**\r\n     * @notice Gets the stETH for 1 wstETH\r\n     * @return amount Amount of stETH\r\n     */\r\n    function _getUnderlyingAmount() internal view override returns (uint256) {\r\n        return IStETH(UNDERLYING_TOKEN).getPooledEthByShares(EXP_SCALE);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": true
      }
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "storageLayout",
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}